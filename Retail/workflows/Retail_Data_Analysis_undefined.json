{  "name": "Retail_Data_Analysis",  "uuid": "8ee20b4a-d0f6-4bd3-9efa-f8474d30edbe",  "category": "EDA",  "nodes": [    {      "id": "1",      "name": "Read CSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "This node reads CSV files and creates a DataFrame from it.<br>",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "23px",      "y": "65px",      "hint": "Whenever the file is changed, Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "/home/sparkflows/fire-data/data/features_data_set.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropSpecialCharacterInColumnName",          "value": "true",          "widget": "array",          "title": "Drop Special Character In ColumnName",          "description": "Drop the SpecialCharacter and Space in Column Name.",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"Store\",\"Date\",\"Temperature\",\"FuelPrice\",\"MarkDown1\",\"MarkDown2\",\"MarkDown3\",\"MarkDown4\",\"MarkDown5\",\"CPI\",\"Unemployment\",\"IsHoliday\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"BOOLEAN\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "2",      "name": "Read CSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "This node reads CSV files and creates a DataFrame from it.<br>",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "29px",      "y": "191px",      "hint": "Whenever the file is changed, Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "/home/sparkflows/fire-data/data/sales_data_set.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropSpecialCharacterInColumnName",          "value": "true",          "widget": "array",          "title": "Drop Special Character In ColumnName",          "description": "Drop the SpecialCharacter and Space in Column Name.",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"Store\",\"Dept\",\"Date\",\"WeeklySales\",\"IsHoliday\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"INTEGER\",\"STRING\",\"DOUBLE\",\"STRING\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "5",      "name": "Group By",      "description": "Grouper Node",      "details": "This node computes aggregations of a group of rows against selected grouping column by applying selected aggregate functions on specified aggregate columns.<br>\n<br>\nOutgoing Dataframe can be filtered based on the Where Clause and Having Clause provided.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    LOCATION    |    DEPT         |    SALARY<br>\n-----------------------------------------------------------------------------<br>\nE01       |    DAVID       |    NEW YORK    |    HR           |    10000<br>\nE02       |    JOHN        |    NEW JERSEY  |    SALES        |    11000<br>\nE03       |    MARTIN      |    NEW YORK    |    MARKETING    |    12000<br>\nE04       |    TONY        |    NEW JERSEY  |    MARKETING    |    13000<br>\nE05       |    ROSS        |    NEW YORK    |    FRONT DESK   |    10000<br>\nE06       |    LISA        |    NEW JERSEY  |    FRONT DESK   |    11000<br>\nE07       |    PAUL        |    NEW YORK    |    MAINTENANCE  |    12000<br>\nE08       |    MARK        |    NEW JERSEY  |    MAINTENANCE  |    13000<br>\n<br>\nif GroupBy node is configured as below:<br>\n<br>\nGROUPING COLUMNS      :    DEPT<br>\n<br>\nAGGREGATE COLUMNS    |    AGGREGATE OPERATION<br>\n-------------------------------------------------<br>\nEMP_CD               |    COUNT<br>\nSALARY               |    SUM<br>\n<br>\nthen outgoing Dataframe would be created as below after performing specified aggregation<br>\nCount of Employees and Summation of Salary all Employees is computed for each [DEPT]:<br>\n<br>\nDEPT           |    count_emp_cd    |    sum_salary<br>\n----------------------------------------------------------<br>\nFRONT DESK     |    2               |    21000<br>\nMARKETING      |    2               |    25000<br>\nHR             |    1               |    10000<br>\nSALES          |    1               |    11000<br>\nMAINTENANCE    |    2               |    25000<br>\n<br>\nif [WHERE CLAUSE] is entered as [DEPT = 'HR'] then outgoing Dataframe would consists of data only from HR department.<br>\n<br>\nif [HAVING CLAUSE] is entered as [COUNT(*) > 1] then outgoing Dataframe would consists of data for Department where count of Employees is more than 1.<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeGroupBy",      "x": "171px",      "y": "193px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "Aggregation Setting",          "value": "",          "widget": "tab",          "title": "Aggregation Setting",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "groupingCols",          "value": "[\"Date\"]",          "widget": "variables",          "title": "Grouping Columns",          "description": "Grouping Columns",          "datatypes": [            "integer",            "long",            "double",            "float",            "string"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "aggregateCols",          "value": "[\"WeeklySales\"]",          "widget": "variables_list_select",          "title": "Aggregate Columns",          "description": "Aggregate Columns",          "datatypes": [            "integer",            "long",            "double",            "float"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "aggregateOperations",          "value": "[\"sum\"]",          "widget": "variables_list_array",          "title": "Aggregate Operation to use",          "description": "Aggregate Operation",          "optionsArray": [            "sum",            "avg",            "min",            "max",            "count"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "Filter Setting",          "value": "",          "widget": "tab",          "title": "Filter Setting",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "whereClause",          "value": "",          "widget": "textarea_small",          "title": "Where Clause",          "description": "where condition before group by function",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "havingClause",          "value": "",          "widget": "textarea_small",          "title": "Having Clause",          "description": "having condition after group by function",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "10",      "name": "Cast To Different Types-1",      "description": "This node creates a new DataFrame by casting the specified columns into new types",      "details": "This node creates a new DataFrame by casting the specified columns into new types.<br>\n<br>\nOption to replace existing column or create a new column after conversion can be selected in the node.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       <br>\n----------------------------------------------------<br>\nSTRING    |    STRING            |    STRING       <br>\n----------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        <br>\nINV002    |    2020-10-15        |    1500.0        <br>\nINV003    |    2010-01-01        |    100.0         <br>\n<br>\nif MultiCastColumnType node is configured to perform conversions as below:<br>\n<br>\nCOLUMNS    |    NEW DATA TYPE    |    REPLACE EXISTING COLS \t<br>\n--------------------------------------------------------------<br>\nINV_DATE   |    DATE             |    false<br>\nINV_DATE   |    LONG             |    false<br>\n<br>\nthen new columns would be added in outgoing Dataframe as below after conversion:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       |    INV_DATE-new  |    INV_AMT-new       <br>\n------------------------------------------------------------------------------------------<br>\nSTRING    |    STRING            |    STRING        |    DATE          |    LONG       <br>\n------------------------------------------------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        |    2010-12-28    |    1000        <br>\nINV002    |    2020-10-15        |    1500.0        |    2020-10-15    |    1500        <br>\nINV003    |    2010-01-01        |    100.0         |    2010-01-01    |    100<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeMultiCastColumnType",      "x": "161px",      "y": "64px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputColNames",          "value": "[\"IsHoliday\"]",          "widget": "variables_list_select",          "title": "Columns",          "description": "Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\"]",          "widget": "variables_list_array",          "title": "New Data Type",          "description": "New data type(INTEGER, DOUBLE, STRING, LONG, SHORT)",          "optionsArray": [            "BOOLEAN",            "BYTE",            "DATE",            "DECIMAL",            "DOUBLE",            "FLOAT",            "INTEGER",            "LONG",            "SHORT",            "STRING",            "TIMESTAMP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "replaceExistingCols",          "value": "[\"true\"]",          "widget": "variables_list_array",          "title": "Replace Existing Cols",          "description": "Whether to replace existing Columns or create New Ones",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "14",      "name": "Filter By Date Range",      "description": "This node filters Rows within the given date range",      "details": "This node filters Rows within the given date range.<br>\n<br>\nNew outgoing Dataframe is created based on filtered rows and it is passed to next node.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nCUST_CD    |    INV_NO    |    INV_DT      |    PRD_CD<br>\n----------------------------------------------------------<br>\nC01        |    INV1111   |    2021-10-01  |    PRD01<br>\nC01        |    INV1112   |    2021-10-03  |    PRD02<br>\nC01        |    INV1113   |    2021-10-05  |    PRD03<br>\nC01        |    INV1114   |    2021-10-07  |    PRD04<br>\nC01        |    INV1115   |    2021-10-09  |    PRD05<br>\nC01        |    INV1116   |    2021-10-10  |    PRD06<br>\n<br>\nIf FilterByDateRange node is configured as below:<br>\n<br>\nCOLUMN       :    INV_DT_VAL<br>\nFROM DATE    :    2021-10-01<br>\nTO DATE      :    2021-10-05<br>\n<br>\nthen outgoing Dataframe would be created as below with the rows falling in the given date range:<br>\n<br>\nCUST_CD    |    INV_NO    |    INV_DT      |    PRD_CD<br>\n----------------------------------------------------------<br>\nC01        |    INV1111   |    2021-10-01  |    PRD01<br>\nC01        |    INV1112   |    2021-10-03  |    PRD02<br>\nC01        |    INV1113   |    2021-10-05  |    PRD03<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeFilterByDateRange",      "x": "790px",      "y": "77px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputCol",          "value": "updatedDate",          "widget": "variable",          "title": "Column",          "description": "input column name",          "datatypes": [            "date"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "fromDateCol",          "value": "2010-01-10",          "widget": "datefield",          "title": "From Date",          "description": "Takes Start Date in the form of yyyy-MM-dd",          "datatypes": [            "date"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "toDateCol",          "value": "2012-12-10",          "widget": "datefield",          "title": "To Date",          "description": "Takes End Date in the form of yyyy-MM-dd",          "datatypes": [            "date"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "15",      "name": "String To Date",      "description": "This node converts string columns to date using the specified date/time format",      "details": "This node converts multiple string columns to date/time.<br>",      "examples": "<h2>Format Examples</h2>\n<br>\n<ul>\n<li> dd-MM-yy : 31-01-12</li>\n<li> dd-MM-yyyy : 31-01-2012</li>\n<li> MM-dd-yyyy : 01-31-2012</li>\n<li> yyyy-MM-dd : 2012-01-31</li>\n<li> yyyy-MM-dd HH:mm:ss : 2012-01-31 23:59:59</li>\n<li> yyyy-MM-dd HH:mm:ss.SSS : 2012-01-31 23:59:59.999</li>\n<li> yyyy-MM-dd HH:mm:ss.SSSZ : 2012-01-31 23:59:59.999+0100</li>\n<li> EEEEE MMMMM yyyy HH:mm:ss.SSSZ : Saturday November 2012 10:45:42.720+0100</li>\n</ul>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeMultiStringToDate",      "x": "455px",      "y": "70px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputColNames",          "value": "[\"Date\"]",          "widget": "variables_list_select",          "title": "Columns",          "description": "Columns",          "datatypes": [            "string"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputColFormats",          "value": "[\"dd/MM/yyyy\"]",          "widget": "variables_list_textfield",          "title": "Input Column Formats",          "description": "Input Column Formats. eg: yyyy-MM-dd yyyy-MM-dd HH:mm:ss",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"yyyy-MM-dd\"]",          "widget": "variables_list_textfield",          "title": "Output Column Names",          "description": "Output Column Names",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"DATE\"]",          "widget": "variables_list_array",          "title": "New Data Types",          "description": "New data types (DATE, TIMESTAMP)",          "optionsArray": [            "DATE",            "TIMESTAMP"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "18",      "name": "Group By",      "description": "Grouper Node",      "details": "This node computes aggregations of a group of rows against selected grouping column by applying selected aggregate functions on specified aggregate columns.<br>\n<br>\nOutgoing Dataframe can be filtered based on the Where Clause and Having Clause provided.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    LOCATION    |    DEPT         |    SALARY<br>\n-----------------------------------------------------------------------------<br>\nE01       |    DAVID       |    NEW YORK    |    HR           |    10000<br>\nE02       |    JOHN        |    NEW JERSEY  |    SALES        |    11000<br>\nE03       |    MARTIN      |    NEW YORK    |    MARKETING    |    12000<br>\nE04       |    TONY        |    NEW JERSEY  |    MARKETING    |    13000<br>\nE05       |    ROSS        |    NEW YORK    |    FRONT DESK   |    10000<br>\nE06       |    LISA        |    NEW JERSEY  |    FRONT DESK   |    11000<br>\nE07       |    PAUL        |    NEW YORK    |    MAINTENANCE  |    12000<br>\nE08       |    MARK        |    NEW JERSEY  |    MAINTENANCE  |    13000<br>\n<br>\nif GroupBy node is configured as below:<br>\n<br>\nGROUPING COLUMNS      :    DEPT<br>\n<br>\nAGGREGATE COLUMNS    |    AGGREGATE OPERATION<br>\n-------------------------------------------------<br>\nEMP_CD               |    COUNT<br>\nSALARY               |    SUM<br>\n<br>\nthen outgoing Dataframe would be created as below after performing specified aggregation<br>\nCount of Employees and Summation of Salary all Employees is computed for each [DEPT]:<br>\n<br>\nDEPT           |    count_emp_cd    |    sum_salary<br>\n----------------------------------------------------------<br>\nFRONT DESK     |    2               |    21000<br>\nMARKETING      |    2               |    25000<br>\nHR             |    1               |    10000<br>\nSALES          |    1               |    11000<br>\nMAINTENANCE    |    2               |    25000<br>\n<br>\nif [WHERE CLAUSE] is entered as [DEPT = 'HR'] then outgoing Dataframe would consists of data only from HR department.<br>\n<br>\nif [HAVING CLAUSE] is entered as [COUNT(*) > 1] then outgoing Dataframe would consists of data for Department where count of Employees is more than 1.<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeGroupBy",      "x": "304px",      "y": "69px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "Aggregation Setting",          "value": "",          "widget": "tab",          "title": "Aggregation Setting",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "groupingCols",          "value": "[\"Date\"]",          "widget": "variables",          "title": "Grouping Columns",          "description": "Grouping Columns",          "datatypes": [            "integer",            "long",            "double",            "float",            "string"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "aggregateCols",          "value": "[\"Temperature\",\"FuelPrice\",\"IsHoliday\",\"CPI\",\"Unemployment\"]",          "widget": "variables_list_select",          "title": "Aggregate Columns",          "description": "Aggregate Columns",          "datatypes": [            "integer",            "long",            "double",            "float"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "aggregateOperations",          "value": "[\"avg\",\"avg\",\"sum\",\"avg\",\"avg\"]",          "widget": "variables_list_array",          "title": "Aggregate Operation to use",          "description": "Aggregate Operation",          "optionsArray": [            "sum",            "avg",            "min",            "max",            "count"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "Filter Setting",          "value": "",          "widget": "tab",          "title": "Filter Setting",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "whereClause",          "value": "",          "widget": "textarea_small",          "title": "Where Clause",          "description": "where condition before group by function",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "havingClause",          "value": "",          "widget": "textarea_small",          "title": "Having Clause",          "description": "having condition after group by function",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "19",      "name": "Columns Rename",      "description": "This node creates a new DataFrame by renaming existing columns with the new name",      "details": "This node creates a new DataFrame by renaming existing columns with the new name.<br>\n<br>\nFor the columns to be renamed, provide the new column name. The output dataframe would have the specified columns renamed to the new ones.<br>",      "examples": "If incoming Dataframe has a column as [CUST NAME] that needs to be renamed to [CUST_NAME] then below details need to be provided in the node:<br>\n<br>\n<ul>\n<li> CURRENT COLUMN NAMES : CUST NAME</li>\n<li> COLUMNS NEW NAME : CUST_NAME</li>\n</ul>\nThis would result in output Dataframe having renameed column [CUST_NAME]. A seprate row needs to be added for each Column Rename requirement.<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeColumnsRename",      "x": "612px",      "y": "70px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "currentColNames",          "value": "[\"yyyy-MM-dd\"]",          "widget": "variables_list_select",          "title": "Current Column Names",          "description": "Current Column Names",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "newColNames",          "value": "[\"updatedDate\"]",          "widget": "variables_list_textfield",          "title": "Columns New Name",          "description": "New name for existing columns",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "21",      "name": "String To Date",      "description": "This node converts string columns to date using the specified date/time format",      "details": "This node converts multiple string columns to date/time.<br>",      "examples": "<h2>Format Examples</h2>\n<br>\n<ul>\n<li> dd-MM-yy : 31-01-12</li>\n<li> dd-MM-yyyy : 31-01-2012</li>\n<li> MM-dd-yyyy : 01-31-2012</li>\n<li> yyyy-MM-dd : 2012-01-31</li>\n<li> yyyy-MM-dd HH:mm:ss : 2012-01-31 23:59:59</li>\n<li> yyyy-MM-dd HH:mm:ss.SSS : 2012-01-31 23:59:59.999</li>\n<li> yyyy-MM-dd HH:mm:ss.SSSZ : 2012-01-31 23:59:59.999+0100</li>\n<li> EEEEE MMMMM yyyy HH:mm:ss.SSSZ : Saturday November 2012 10:45:42.720+0100</li>\n</ul>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeMultiStringToDate",      "x": "320px",      "y": "186px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputColNames",          "value": "[\"Date\"]",          "widget": "variables_list_select",          "title": "Columns",          "description": "Columns",          "datatypes": [            "string"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputColFormats",          "value": "[\"dd/MM/yyyy\"]",          "widget": "variables_list_textfield",          "title": "Input Column Formats",          "description": "Input Column Formats. eg: yyyy-MM-dd yyyy-MM-dd HH:mm:ss",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"yyyy-MM-dd\"]",          "widget": "variables_list_textfield",          "title": "Output Column Names",          "description": "Output Column Names",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"DATE\"]",          "widget": "variables_list_array",          "title": "New Data Types",          "description": "New data types (DATE, TIMESTAMP)",          "optionsArray": [            "DATE",            "TIMESTAMP"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "22",      "name": "Columns Rename",      "description": "This node creates a new DataFrame by renaming existing columns with the new name",      "details": "This node creates a new DataFrame by renaming existing columns with the new name.<br>\n<br>\nFor the columns to be renamed, provide the new column name. The output dataframe would have the specified columns renamed to the new ones.<br>",      "examples": "If incoming Dataframe has a column as [CUST NAME] that needs to be renamed to [CUST_NAME] then below details need to be provided in the node:<br>\n<br>\n<ul>\n<li> CURRENT COLUMN NAMES : CUST NAME</li>\n<li> COLUMNS NEW NAME : CUST_NAME</li>\n</ul>\nThis would result in output Dataframe having renameed column [CUST_NAME]. A seprate row needs to be added for each Column Rename requirement.<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeColumnsRename",      "x": "442px",      "y": "196px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "currentColNames",          "value": "[\"yyyy-MM-dd\"]",          "widget": "variables_list_select",          "title": "Current Column Names",          "description": "Current Column Names",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "newColNames",          "value": "[\"updatedDate\"]",          "widget": "variables_list_textfield",          "title": "Columns New Name",          "description": "New name for existing columns",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "25",      "name": "Math Expression",      "description": "Creates new columns using the specified expressions",      "details": "This node creates a new DataFrame by adding new column to the incoming Dataframe as per the specified expression.<br>\n<br>\nNew column can be computed using existing columns in the Dataframe.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nPRD_CD    |    PRD_NAME          |    LIST_PRICE    |    TAX_AMT    |    DISCOUNT<br>\n--------------------------------------------------------------------------------------<br>\nP01       |    DRILL MACHINE     |    1000.0        |    100.0      |    50.0<br>\nP02       |    WEIGHING MACHINE  |    1500.0        |    200.0      |    150.0<br>\nP03       |    HAMMER            |    100.0         |    10.0       |    5.0<br>\n<br>\nIf MathExpression node is configured to compute a new column [NET_AMT] based on expression [LIST_PRICE + TAX_AMT - DISCOUNT]<br>\nthen outgoing Dataframe would be created as below with new column added:<br>\n<br>\nPRD_CD    |    PRD_NAME          |    LIST_PRICE    |    TAX_AMT    |    DISCOUNT    |    NET_AMT    <br>\n------------------------------------------------------------------------------------------------------<br>\nP01       |    DRILL MACHINE     |    1000.0        |    100.0      |    50.0        |    1050.0<br>\nP02       |    WEIGHING MACHINE  |    1500.0        |    200.0      |    150.0       |    1550.0<br>\nP03       |    HAMMER            |    100.0         |    10.0       |    5.0         |    105.0<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeMathExpression",      "x": "620px",      "y": "198px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputCols",          "value": "[\"updatedWeeklySales\"]",          "widget": "key_array",          "title": "OutPut Column",          "description": "Output Column Name",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "expressions",          "value": "[\"sum_weeklysales/1000000\"]",          "widget": "value_array",          "title": "Math Expression",          "description": "Define math expression.",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "26",      "name": "Cast To Different Types-1",      "description": "This node creates a new DataFrame by casting the specified columns into new types",      "details": "This node creates a new DataFrame by casting the specified columns into new types.<br>\n<br>\nOption to replace existing column or create a new column after conversion can be selected in the node.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       <br>\n----------------------------------------------------<br>\nSTRING    |    STRING            |    STRING       <br>\n----------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        <br>\nINV002    |    2020-10-15        |    1500.0        <br>\nINV003    |    2010-01-01        |    100.0         <br>\n<br>\nif MultiCastColumnType node is configured to perform conversions as below:<br>\n<br>\nCOLUMNS    |    NEW DATA TYPE    |    REPLACE EXISTING COLS \t<br>\n--------------------------------------------------------------<br>\nINV_DATE   |    DATE             |    false<br>\nINV_DATE   |    LONG             |    false<br>\n<br>\nthen new columns would be added in outgoing Dataframe as below after conversion:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       |    INV_DATE-new  |    INV_AMT-new       <br>\n------------------------------------------------------------------------------------------<br>\nSTRING    |    STRING            |    STRING        |    DATE          |    LONG       <br>\n------------------------------------------------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        |    2010-12-28    |    1000        <br>\nINV002    |    2020-10-15        |    1500.0        |    2020-10-15    |    1500        <br>\nINV003    |    2010-01-01        |    100.0         |    2010-01-01    |    100<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeMultiCastColumnType",      "x": "792px",      "y": "196px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputColNames",          "value": "[\"updatedWeeklySales\"]",          "widget": "variables_list_select",          "title": "Columns",          "description": "Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\"]",          "widget": "variables_list_array",          "title": "New Data Type",          "description": "New data type(INTEGER, DOUBLE, STRING, LONG, SHORT)",          "optionsArray": [            "BOOLEAN",            "BYTE",            "DATE",            "DECIMAL",            "DOUBLE",            "FLOAT",            "INTEGER",            "LONG",            "SHORT",            "STRING",            "TIMESTAMP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "replaceExistingCols",          "value": "[\"true\"]",          "widget": "variables_list_array",          "title": "Replace Existing Cols",          "description": "Whether to replace existing Columns or create New Ones",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "27",      "name": "Join On Common Column",      "description": "This node joins the incoming dataframes using one common column between them.",      "details": "This node joins the incoming dataframes using one common column between the two dataframes. <br>\n<br>\nSelect the Common Join Column to be used in the Join.<br>",      "examples": "",      "type": "join",      "nodeClass": "fire.nodes.etl.NodeJoinUsingColumn",      "x": "939px",      "y": "127px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinCol",          "value": "updatedDate",          "widget": "variable_common",          "title": "Common Join Column",          "description": "column on which to join",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinType",          "value": "leftouter",          "widget": "array",          "title": "JoinType",          "description": "type of join",          "optionsArray": [            "inner",            "outer",            "leftouter",            "rightouter",            "leftsemi",            "leftanti"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"updatedDate\",\"Date\",\"sum_weeklysales\",\"updatedWeeklySales\",\"Date\",\"avg_temperature\",\"avg_fuelprice\",\"sum_isholiday\",\"avg_cpi\",\"avg_unemployment\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"DATE\",\"STRING\",\"DOUBLE\",\"INTEGER\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"LONG\",\"DOUBLE\",\"DOUBLE\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "28",      "name": "Drop Columns",      "description": "This node creates a new DataFrame by dropping the specified columns",      "details": "This node creates a new DataFrame by deleting columns specified as an input.<br>\n<br>\nThe specified columns are dropped from the incoming DataFrame to generate the output DataFrame.<br>",      "examples": "If incoming Dataframe has following columns<br>\n<br>\n<ul>\n<li> CUST_CD</li>\n<li> CUST_NAME</li>\n<li> DOB</li>\n<li> ADDRESS</li>\n</ul>\nand [DOB] and [ADDRESS] need to be dropped from outgoing Dataframe then add following to the Drop list in the Drop Column node:<br>\n<br>\n<ul>\n<li> DOB</li>\n<li> ADDRESS</li>\n</ul>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeDropColumns",      "x": "1074px",      "y": "142px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropCols",          "value": "[\"Date\",\"sum_weeklysales\"]",          "widget": "variables",          "title": "Columns",          "description": "The columns to be excluded from the output DataFrame",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "30",      "name": "Graph SubPlots",      "details": "This node represents variation between multiple pair of data series together in Graphical format.<br>\n<br>\nMultiple pairs of data series between whom variation is to be plotted can be selected. Variation between each pair would be plotted in a separate graph.<br>\n<br>\nEach Graph can be configured separately in terms of GrpahTypes and Coordinates values.<br>\n<br>\nAll graphs are displayed separately in the output.<br>",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.graph.NodeGraphSubPlots",      "x": "1196px",      "y": "328px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "title",          "value": "Graph",          "widget": "textfield",          "title": "Title",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxValuesToDisplay",          "value": "1000",          "widget": "textfield",          "title": "Max Values To Display",          "description": "Maximum number of values to display in result.",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "chartColors",          "value": "#F2A993,#76D0D7,#B9ABE5,#EEC896,#DE95B0,#009cef,#86ABA1,#00AF91,#C2B8A3,#BFA2DB",          "widget": "colors",          "title": "Chart Colors",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "xCols",          "value": "[\"updatedDate\",\"updatedDate\",\"updatedDate\",\"updatedDate\",\"updatedDate\"]",          "widget": "variables_list_select",          "title": "X-Columns",          "description": "X axis Columns",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "yCols",          "value": "[\"avg_temperature\",\"avg_fuelprice\",\"avg_cpi\",\"avg_unemployment\",\"updatedWeeklySales\"]",          "widget": "variables_list_options",          "title": "Y-Columns",          "description": "Y axis Columns",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "graphTypes",          "value": "[\"LINECHART\",\"LINECHART\",\"LINECHART\",\"LINECHART\",\"LINECHART\"]",          "widget": "variables_list_array",          "title": "GraphTypes",          "description": "",          "optionsArray": [            "LINECHART",            "COLUMNCHART",            "BARCHART",            "PIE",            "SCATTERCHART",            "DUALLINECHART"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "xLabels",          "value": "[\"Date\",\"Date\",\"Date\",\"Date\",\"Date\"]",          "widget": "variables_list_textfield",          "title": "X Labels",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "yLabels",          "value": "[\"Temperature\",\"Fuel Price\",\"CPI\",\"Unemployment\",\"Weekly Sales\"]",          "widget": "variables_list_textfield",          "title": "Y Labels",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "31",      "name": "Sticky Note",      "description": "Allows capturing Notes on the Workflow",      "details": "",      "examples": "",      "type": "sticky",      "nodeClass": "fire.nodes.doc.NodeStickyNote",      "x": "34px",      "y": "313px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "bgColor",          "value": "blue",          "widget": "textfield",          "title": "Bg Color",          "description": "Background of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "width",          "value": "300px",          "widget": "textfield",          "title": "Width",          "description": "Width of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "height",          "value": "110px",          "widget": "textfield",          "title": "Height",          "description": "Height of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "comment",          "value": "<p>Link to Notebook: <a href=\"https://www.kaggle.com/code/shubhamsinghgharsele/retail-data-analysis/notebook\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.kaggle.com/code/shubhamsinghgharsele/retail-data-analysis/notebook</a></p>",          "widget": "textarea_rich",          "title": "Comment",          "description": "Comments for the Workflow",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "32",      "name": "Sticky Note",      "description": "Allows capturing Notes on the Workflow",      "details": "",      "examples": "",      "type": "sticky",      "nodeClass": "fire.nodes.doc.NodeStickyNote",      "x": "1080px",      "y": "418px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "bgColor",          "value": "gray",          "widget": "textfield",          "title": "Bg Color",          "description": "Background of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "width",          "value": "326px",          "widget": "textfield",          "title": "Width",          "description": "Width of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "height",          "value": "115px",          "widget": "textfield",          "title": "Height",          "description": "Height of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "comment",          "value": "<p>Fuel Price and Consumer Price Index show growth over the year</p><p>Unemployment decreased year after year.</p><p>Temperature is showing a random walk with a dip</p><p><br></p>",          "widget": "textarea_rich",          "title": "Comment",          "description": "Comments for the Workflow",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "33",      "name": "Correlation",      "description": "calculates the correlation between two series of data.",      "details": "This node calculates the correlation between two series of data in a common operation in Statistics.<br>\n<br>\nMore at Spark MLlib/ML docs page : <a href=\"http://spark.apache.org/docs/latest/mllib-statistics.html#correlations\" target=\"_blank\">spark.apache.org/docs/latest/mllib-statistics.html#correlations</a><br>",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.ml.NodeCorrelation",      "x": "912px",      "y": "342px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "title",          "value": "Correlation Matrix",          "widget": "textfield",          "title": "Title",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputCols",          "value": "[\"avg_temperature\",\"avg_fuelprice\",\"sum_isholiday\",\"avg_cpi\",\"avg_unemployment\",\"updatedWeeklySales\"]",          "widget": "variables",          "title": "Input Column for Correlation",          "description": "Column Names to check correlation ",          "datatypes": [            "integer",            "long",            "double",            "float"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "handleInvalid",          "value": "skip",          "widget": "array",          "title": "Handle invalid pairs",          "description": "Handle invalid pairs.",          "datatypes": [            "string"          ],          "optionsArray": [            "skip",            "error",            "keep"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "34",      "name": "Sticky Note",      "description": "Allows capturing Notes on the Workflow",      "details": "",      "examples": "",      "type": "sticky",      "nodeClass": "fire.nodes.doc.NodeStickyNote",      "x": "727px",      "y": "422px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "bgColor",          "value": "gray",          "widget": "textfield",          "title": "Bg Color",          "description": "Background of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "width",          "value": "338px",          "widget": "textfield",          "title": "Width",          "description": "Width of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "height",          "value": "132px",          "widget": "textfield",          "title": "Height",          "description": "Height of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "comment",          "value": "<p>CPI and Unemployment show negative correlation on other hand Fuel Price and CPI show positive correlation</p><p>Unemployment and Fuel price are also negatively correlated</p>",          "widget": "textarea_rich",          "title": "Comment",          "description": "Comments for the Workflow",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "41",      "name": "Read CSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "This node reads CSV files and creates a DataFrame from it.<br>",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "32px",      "y": "504px",      "hint": "Whenever the file is changed, Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "/home/sparkflows/fire-data/data/features_data_set.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropSpecialCharacterInColumnName",          "value": "true",          "widget": "array",          "title": "Drop Special Character In ColumnName",          "description": "Drop the SpecialCharacter and Space in Column Name.",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"Store\",\"Date\",\"Temperature\",\"FuelPrice\",\"MarkDown1\",\"MarkDown2\",\"MarkDown3\",\"MarkDown4\",\"MarkDown5\",\"CPI\",\"Unemployment\",\"IsHoliday\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"BOOLEAN\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "42",      "name": "Cast To Different Types-1",      "description": "This node creates a new DataFrame by casting the specified columns into new types",      "details": "This node creates a new DataFrame by casting the specified columns into new types.<br>\n<br>\nOption to replace existing column or create a new column after conversion can be selected in the node.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       <br>\n----------------------------------------------------<br>\nSTRING    |    STRING            |    STRING       <br>\n----------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        <br>\nINV002    |    2020-10-15        |    1500.0        <br>\nINV003    |    2010-01-01        |    100.0         <br>\n<br>\nif MultiCastColumnType node is configured to perform conversions as below:<br>\n<br>\nCOLUMNS    |    NEW DATA TYPE    |    REPLACE EXISTING COLS \t<br>\n--------------------------------------------------------------<br>\nINV_DATE   |    DATE             |    false<br>\nINV_DATE   |    LONG             |    false<br>\n<br>\nthen new columns would be added in outgoing Dataframe as below after conversion:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       |    INV_DATE-new  |    INV_AMT-new       <br>\n------------------------------------------------------------------------------------------<br>\nSTRING    |    STRING            |    STRING        |    DATE          |    LONG       <br>\n------------------------------------------------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        |    2010-12-28    |    1000        <br>\nINV002    |    2020-10-15        |    1500.0        |    2020-10-15    |    1500        <br>\nINV003    |    2010-01-01        |    100.0         |    2010-01-01    |    100<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeMultiCastColumnType",      "x": "237px",      "y": "505px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputColNames",          "value": "[\"IsHoliday\"]",          "widget": "variables_list_select",          "title": "Columns",          "description": "Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\"]",          "widget": "variables_list_array",          "title": "New Data Type",          "description": "New data type(INTEGER, DOUBLE, STRING, LONG, SHORT)",          "optionsArray": [            "BOOLEAN",            "BYTE",            "DATE",            "DECIMAL",            "DOUBLE",            "FLOAT",            "INTEGER",            "LONG",            "SHORT",            "STRING",            "TIMESTAMP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "replaceExistingCols",          "value": "[\"true\"]",          "widget": "variables_list_array",          "title": "Replace Existing Cols",          "description": "Whether to replace existing Columns or create New Ones",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "43",      "name": "Group By",      "description": "Grouper Node",      "details": "This node computes aggregations of a group of rows against selected grouping column by applying selected aggregate functions on specified aggregate columns.<br>\n<br>\nOutgoing Dataframe can be filtered based on the Where Clause and Having Clause provided.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    LOCATION    |    DEPT         |    SALARY<br>\n-----------------------------------------------------------------------------<br>\nE01       |    DAVID       |    NEW YORK    |    HR           |    10000<br>\nE02       |    JOHN        |    NEW JERSEY  |    SALES        |    11000<br>\nE03       |    MARTIN      |    NEW YORK    |    MARKETING    |    12000<br>\nE04       |    TONY        |    NEW JERSEY  |    MARKETING    |    13000<br>\nE05       |    ROSS        |    NEW YORK    |    FRONT DESK   |    10000<br>\nE06       |    LISA        |    NEW JERSEY  |    FRONT DESK   |    11000<br>\nE07       |    PAUL        |    NEW YORK    |    MAINTENANCE  |    12000<br>\nE08       |    MARK        |    NEW JERSEY  |    MAINTENANCE  |    13000<br>\n<br>\nif GroupBy node is configured as below:<br>\n<br>\nGROUPING COLUMNS      :    DEPT<br>\n<br>\nAGGREGATE COLUMNS    |    AGGREGATE OPERATION<br>\n-------------------------------------------------<br>\nEMP_CD               |    COUNT<br>\nSALARY               |    SUM<br>\n<br>\nthen outgoing Dataframe would be created as below after performing specified aggregation<br>\nCount of Employees and Summation of Salary all Employees is computed for each [DEPT]:<br>\n<br>\nDEPT           |    count_emp_cd    |    sum_salary<br>\n----------------------------------------------------------<br>\nFRONT DESK     |    2               |    21000<br>\nMARKETING      |    2               |    25000<br>\nHR             |    1               |    10000<br>\nSALES          |    1               |    11000<br>\nMAINTENANCE    |    2               |    25000<br>\n<br>\nif [WHERE CLAUSE] is entered as [DEPT = 'HR'] then outgoing Dataframe would consists of data only from HR department.<br>\n<br>\nif [HAVING CLAUSE] is entered as [COUNT(*) > 1] then outgoing Dataframe would consists of data for Department where count of Employees is more than 1.<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeGroupBy",      "x": "435px",      "y": "502px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "Aggregation Setting",          "value": "",          "widget": "tab",          "title": "Aggregation Setting",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "groupingCols",          "value": "[\"Store\"]",          "widget": "variables",          "title": "Grouping Columns",          "description": "Grouping Columns",          "datatypes": [            "integer",            "long",            "double",            "float",            "string"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "aggregateCols",          "value": "[\"Temperature\",\"FuelPrice\",\"IsHoliday\"]",          "widget": "variables_list_select",          "title": "Aggregate Columns",          "description": "Aggregate Columns",          "datatypes": [            "integer",            "long",            "double",            "float"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "aggregateOperations",          "value": "[\"avg\",\"avg\",\"sum\"]",          "widget": "variables_list_array",          "title": "Aggregate Operation to use",          "description": "Aggregate Operation",          "optionsArray": [            "sum",            "avg",            "min",            "max",            "count"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "Filter Setting",          "value": "",          "widget": "tab",          "title": "Filter Setting",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "whereClause",          "value": "",          "widget": "textarea_small",          "title": "Where Clause",          "description": "where condition before group by function",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "havingClause",          "value": "",          "widget": "textarea_small",          "title": "Having Clause",          "description": "having condition after group by function",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "44",      "name": "Read CSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "This node reads CSV files and creates a DataFrame from it.<br>",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "30px",      "y": "614px",      "hint": "Whenever the file is changed, Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "/home/sparkflows/fire-data/data/sales_data_set.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropSpecialCharacterInColumnName",          "value": "true",          "widget": "array",          "title": "Drop Special Character In ColumnName",          "description": "Drop the SpecialCharacter and Space in Column Name.",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"Store\",\"Dept\",\"Date\",\"WeeklySales\",\"IsHoliday\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"INTEGER\",\"STRING\",\"DOUBLE\",\"STRING\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "45",      "name": "Group By",      "description": "Grouper Node",      "details": "This node computes aggregations of a group of rows against selected grouping column by applying selected aggregate functions on specified aggregate columns.<br>\n<br>\nOutgoing Dataframe can be filtered based on the Where Clause and Having Clause provided.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    LOCATION    |    DEPT         |    SALARY<br>\n-----------------------------------------------------------------------------<br>\nE01       |    DAVID       |    NEW YORK    |    HR           |    10000<br>\nE02       |    JOHN        |    NEW JERSEY  |    SALES        |    11000<br>\nE03       |    MARTIN      |    NEW YORK    |    MARKETING    |    12000<br>\nE04       |    TONY        |    NEW JERSEY  |    MARKETING    |    13000<br>\nE05       |    ROSS        |    NEW YORK    |    FRONT DESK   |    10000<br>\nE06       |    LISA        |    NEW JERSEY  |    FRONT DESK   |    11000<br>\nE07       |    PAUL        |    NEW YORK    |    MAINTENANCE  |    12000<br>\nE08       |    MARK        |    NEW JERSEY  |    MAINTENANCE  |    13000<br>\n<br>\nif GroupBy node is configured as below:<br>\n<br>\nGROUPING COLUMNS      :    DEPT<br>\n<br>\nAGGREGATE COLUMNS    |    AGGREGATE OPERATION<br>\n-------------------------------------------------<br>\nEMP_CD               |    COUNT<br>\nSALARY               |    SUM<br>\n<br>\nthen outgoing Dataframe would be created as below after performing specified aggregation<br>\nCount of Employees and Summation of Salary all Employees is computed for each [DEPT]:<br>\n<br>\nDEPT           |    count_emp_cd    |    sum_salary<br>\n----------------------------------------------------------<br>\nFRONT DESK     |    2               |    21000<br>\nMARKETING      |    2               |    25000<br>\nHR             |    1               |    10000<br>\nSALES          |    1               |    11000<br>\nMAINTENANCE    |    2               |    25000<br>\n<br>\nif [WHERE CLAUSE] is entered as [DEPT = 'HR'] then outgoing Dataframe would consists of data only from HR department.<br>\n<br>\nif [HAVING CLAUSE] is entered as [COUNT(*) > 1] then outgoing Dataframe would consists of data for Department where count of Employees is more than 1.<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeGroupBy",      "x": "172px",      "y": "621px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "Aggregation Setting",          "value": "",          "widget": "tab",          "title": "Aggregation Setting",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "groupingCols",          "value": "[\"Store\"]",          "widget": "variables",          "title": "Grouping Columns",          "description": "Grouping Columns",          "datatypes": [            "integer",            "long",            "double",            "float",            "string"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "aggregateCols",          "value": "[\"WeeklySales\"]",          "widget": "variables_list_select",          "title": "Aggregate Columns",          "description": "Aggregate Columns",          "datatypes": [            "integer",            "long",            "double",            "float"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "aggregateOperations",          "value": "[\"sum\"]",          "widget": "variables_list_array",          "title": "Aggregate Operation to use",          "description": "Aggregate Operation",          "optionsArray": [            "sum",            "avg",            "min",            "max",            "count"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "Filter Setting",          "value": "",          "widget": "tab",          "title": "Filter Setting",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "whereClause",          "value": "",          "widget": "textarea_small",          "title": "Where Clause",          "description": "where condition before group by function",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "havingClause",          "value": "",          "widget": "textarea_small",          "title": "Having Clause",          "description": "having condition after group by function",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "46",      "name": "Math Expression",      "description": "Creates new columns using the specified expressions",      "details": "This node creates a new DataFrame by adding new column to the incoming Dataframe as per the specified expression.<br>\n<br>\nNew column can be computed using existing columns in the Dataframe.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nPRD_CD    |    PRD_NAME          |    LIST_PRICE    |    TAX_AMT    |    DISCOUNT<br>\n--------------------------------------------------------------------------------------<br>\nP01       |    DRILL MACHINE     |    1000.0        |    100.0      |    50.0<br>\nP02       |    WEIGHING MACHINE  |    1500.0        |    200.0      |    150.0<br>\nP03       |    HAMMER            |    100.0         |    10.0       |    5.0<br>\n<br>\nIf MathExpression node is configured to compute a new column [NET_AMT] based on expression [LIST_PRICE + TAX_AMT - DISCOUNT]<br>\nthen outgoing Dataframe would be created as below with new column added:<br>\n<br>\nPRD_CD    |    PRD_NAME          |    LIST_PRICE    |    TAX_AMT    |    DISCOUNT    |    NET_AMT    <br>\n------------------------------------------------------------------------------------------------------<br>\nP01       |    DRILL MACHINE     |    1000.0        |    100.0      |    50.0        |    1050.0<br>\nP02       |    WEIGHING MACHINE  |    1500.0        |    200.0      |    150.0       |    1550.0<br>\nP03       |    HAMMER            |    100.0         |    10.0       |    5.0         |    105.0<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeMathExpression",      "x": "320px",      "y": "619px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputCols",          "value": "[\"updatedWeeklySales\"]",          "widget": "key_array",          "title": "OutPut Column",          "description": "Output Column Name",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "expressions",          "value": "[\"sum_weeklysales/1000000\"]",          "widget": "value_array",          "title": "Math Expression",          "description": "Define math expression.",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "47",      "name": "Cast To Different Types-1",      "description": "This node creates a new DataFrame by casting the specified columns into new types",      "details": "This node creates a new DataFrame by casting the specified columns into new types.<br>\n<br>\nOption to replace existing column or create a new column after conversion can be selected in the node.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       <br>\n----------------------------------------------------<br>\nSTRING    |    STRING            |    STRING       <br>\n----------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        <br>\nINV002    |    2020-10-15        |    1500.0        <br>\nINV003    |    2010-01-01        |    100.0         <br>\n<br>\nif MultiCastColumnType node is configured to perform conversions as below:<br>\n<br>\nCOLUMNS    |    NEW DATA TYPE    |    REPLACE EXISTING COLS \t<br>\n--------------------------------------------------------------<br>\nINV_DATE   |    DATE             |    false<br>\nINV_DATE   |    LONG             |    false<br>\n<br>\nthen new columns would be added in outgoing Dataframe as below after conversion:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       |    INV_DATE-new  |    INV_AMT-new       <br>\n------------------------------------------------------------------------------------------<br>\nSTRING    |    STRING            |    STRING        |    DATE          |    LONG       <br>\n------------------------------------------------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        |    2010-12-28    |    1000        <br>\nINV002    |    2020-10-15        |    1500.0        |    2020-10-15    |    1500        <br>\nINV003    |    2010-01-01        |    100.0         |    2010-01-01    |    100<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeMultiCastColumnType",      "x": "454px",      "y": "636px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputColNames",          "value": "[\"updatedWeeklySales\"]",          "widget": "variables_list_select",          "title": "Columns",          "description": "Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\"]",          "widget": "variables_list_array",          "title": "New Data Type",          "description": "New data type(INTEGER, DOUBLE, STRING, LONG, SHORT)",          "optionsArray": [            "BOOLEAN",            "BYTE",            "DATE",            "DECIMAL",            "DOUBLE",            "FLOAT",            "INTEGER",            "LONG",            "SHORT",            "STRING",            "TIMESTAMP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "replaceExistingCols",          "value": "[\"true\"]",          "widget": "variables_list_array",          "title": "Replace Existing Cols",          "description": "Whether to replace existing Columns or create New Ones",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "48",      "name": "Read CSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "This node reads CSV files and creates a DataFrame from it.<br>",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "30px",      "y": "714.5px",      "hint": "Whenever the file is changed, Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "/home/sparkflows/fire-data/data/stores_data_set.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropSpecialCharacterInColumnName",          "value": "true",          "widget": "array",          "title": "Drop Special Character In ColumnName",          "description": "Drop the SpecialCharacter and Space in Column Name.",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"Store\",\"Type\",\"Size\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"STRING\",\"INTEGER\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "49",      "name": "Join On Common Column",      "description": "This node joins the incoming dataframes using one common column between them.",      "details": "This node joins the incoming dataframes using one common column between the two dataframes. <br>\n<br>\nSelect the Common Join Column to be used in the Join.<br>",      "examples": "",      "type": "join",      "nodeClass": "fire.nodes.etl.NodeJoinUsingColumn",      "x": "647px",      "y": "706.5px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinCol",          "value": "Store",          "widget": "variable_common",          "title": "Common Join Column",          "description": "column on which to join",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinType",          "value": "inner",          "widget": "array",          "title": "JoinType",          "description": "type of join",          "optionsArray": [            "inner",            "outer",            "leftouter",            "rightouter",            "leftsemi",            "leftanti"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"Store\",\"avg_temperature\",\"avg_fuelprice\",\"sum_isholiday\",\"sum_weeklysales\",\"updatedWeeklySales\",\"Type\",\"Size\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"LONG\",\"DOUBLE\",\"INTEGER\",\"STRING\",\"INTEGER\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "50",      "name": "Drop Columns",      "description": "This node creates a new DataFrame by dropping the specified columns",      "details": "This node creates a new DataFrame by deleting columns specified as an input.<br>\n<br>\nThe specified columns are dropped from the incoming DataFrame to generate the output DataFrame.<br>",      "examples": "If incoming Dataframe has following columns<br>\n<br>\n<ul>\n<li> CUST_CD</li>\n<li> CUST_NAME</li>\n<li> DOB</li>\n<li> ADDRESS</li>\n</ul>\nand [DOB] and [ADDRESS] need to be dropped from outgoing Dataframe then add following to the Drop list in the Drop Column node:<br>\n<br>\n<ul>\n<li> DOB</li>\n<li> ADDRESS</li>\n</ul>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeDropColumns",      "x": "798px",      "y": "668.5px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropCols",          "value": "[\"sum_weeklysales\"]",          "widget": "variables",          "title": "Columns",          "description": "The columns to be excluded from the output DataFrame",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "51",      "name": "Print N Rows",      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",      "details": "This node is used to print incoming dataset.<br>\n<br>\nNumber of rows that needs to be printed can be configured in the node.<br>",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",      "x": "1007px",      "y": "708px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "title",          "value": "Row Values",          "widget": "textfield",          "title": "Title",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "n",          "value": "10",          "widget": "textfield",          "title": "Num Rows to Print",          "description": "number of rows to be printed",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "displayDataType",          "value": "true",          "widget": "array",          "title": "Display Data Type",          "description": "If true display rows DataType",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "52",      "name": "Graph Group By Column",      "description": "Groups the data by the given column and plots the number of records in each group",      "details": "This node represents distribution / count of group of data in Graphical format.<br>\n<br>\nA numeric column from the incoming dataset is selected to aggregate data into multiple groups. Count of data-points in each group is plotted in the Chart.<br>\n<br>\nChart Type used to represent data can be selected in the node.<br>",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.graph.NodeGraphGroupByColumn",      "x": "1008px",      "y": "590.5px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "title",          "value": "Graph of the counts grouped by column",          "widget": "textfield",          "title": "Title",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "xlabel",          "value": "StoreType",          "widget": "textfield",          "title": "X Label",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "ylabel",          "value": "count",          "widget": "textfield",          "title": "Y Label",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxValuesToDisplay",          "value": "1000",          "widget": "textfield",          "title": "Max Values To Display",          "description": "Maximum number of values to display in result.",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "chartColors",          "value": "#F2A993,#76D0D7,#B9ABE5,#EEC896,#DE95B0,#009cef,#86ABA1,#00AF91,#C2B8A3,#BFA2DB",          "widget": "colors",          "title": "Chart Colors",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "groupByColumn",          "value": "DepartmentType",          "widget": "variable",          "title": "Group By Column",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "graphType",          "value": "COLUMNCHART",          "widget": "enum",          "title": "Chart Type",          "optionsMap": {            "COLUMNCHART": "Column Chart",            "BARCHART": "Bar Chart",            "LINECHART": "Line Chart",            "HISTOGRAM": "Histogram Chart"          },          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "53",      "name": "Sticky Note",      "description": "Allows capturing Notes on the Workflow",      "details": "",      "examples": "",      "type": "sticky",      "nodeClass": "fire.nodes.doc.NodeStickyNote",      "x": "371px",      "y": "289px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "bgColor",          "value": "gray",          "widget": "textfield",          "title": "Bg Color",          "description": "Background of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "width",          "value": "350px",          "widget": "textfield",          "title": "Width",          "description": "Width of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "height",          "value": "119px",          "widget": "textfield",          "title": "Height",          "description": "Height of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "comment",          "value": "",          "widget": "textarea_rich",          "title": "Comment",          "description": "Comments for the Workflow",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "54",      "name": "Sort By",      "description": "It sorts the incoming DataFrame on the fields specified.",      "details": "This node sorts the incoming DataFrame based on the values present in columns specified.<br>\n<br>\nMultiple columns can be selected for sorting data. Data can be sorted in Ascending or Descending order.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\n<br>\nIf SortBy node is configured to sort data in descending order of values present in [CUST_NAME] column then outgoing Dataframe would be created as below:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeSortBy",      "x": "1185px",      "y": "185px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "description",          "value": "",          "widget": "textfield",          "title": "Description",          "description": "Description",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "sortByColNames",          "value": "[\"updatedDate\"]",          "widget": "variables_list_select",          "title": "Columns",          "description": "Columns on which to Sort By",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "ascDesc",          "value": "[\"ASC\"]",          "widget": "variables_list_array",          "title": "Sorting Order",          "description": "Whether to sort in ascending or descending order",          "optionsArray": [            "DESC",            "ASC"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "55",      "name": "Columns Rename",      "description": "This node creates a new DataFrame by renaming existing columns with the new name",      "details": "This node creates a new DataFrame by renaming existing columns with the new name.<br>\n<br>\nFor the columns to be renamed, provide the new column name. The output dataframe would have the specified columns renamed to the new ones.<br>",      "examples": "If incoming Dataframe has a column as [CUST NAME] that needs to be renamed to [CUST_NAME] then below details need to be provided in the node:<br>\n<br>\n<ul>\n<li> CURRENT COLUMN NAMES : CUST NAME</li>\n<li> COLUMNS NEW NAME : CUST_NAME</li>\n</ul>\nThis would result in output Dataframe having renameed column [CUST_NAME]. A seprate row needs to be added for each Column Rename requirement.<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeColumnsRename",      "x": "896px",      "y": "578px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "currentColNames",          "value": "[\"Type\"]",          "widget": "variables_list_select",          "title": "Current Column Names",          "description": "Current Column Names",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "newColNames",          "value": "[\"DepartmentType\"]",          "widget": "variables_list_textfield",          "title": "Columns New Name",          "description": "New name for existing columns",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    }  ],  "edges": [    {      "source": "1",      "target": "10",      "id": 1    },    {      "source": "15",      "target": "19",      "id": 2    },    {      "source": "10",      "target": "18",      "id": 3    },    {      "source": "18",      "target": "15",      "id": 4    },    {      "source": "5",      "target": "21",      "id": 5    },    {      "source": "21",      "target": "22",      "id": 6    },    {      "source": "2",      "target": "5",      "id": 7    },    {      "source": "25",      "target": "26",      "id": 8    },    {      "source": "26",      "target": "27",      "id": 9    },    {      "source": "14",      "target": "27",      "id": 10    },    {      "source": "27",      "target": "28",      "id": 11    },    {      "source": "28",      "target": "33",      "id": 12    },    {      "source": "41",      "target": "42",      "id": 13    },    {      "source": "42",      "target": "43",      "id": 14    },    {      "source": "44",      "target": "45",      "id": 15    },    {      "source": "45",      "target": "46",      "id": 16    },    {      "source": "46",      "target": "47",      "id": 17    },    {      "source": "43",      "target": "49",      "id": 18    },    {      "source": "47",      "target": "49",      "id": 19    },    {      "source": "48",      "target": "49",      "id": 20    },    {      "source": "49",      "target": "50",      "id": 21    },    {      "source": "50",      "target": "51",      "id": 22    },    {      "source": "28",      "target": "54",      "id": 23    },    {      "source": "54",      "target": "30",      "id": 24    },    {      "source": "22",      "target": "25",      "id": 25    },    {      "source": "19",      "target": "14",      "id": 26    },    {      "source": "50",      "target": "55",      "id": 27    },    {      "source": "55",      "target": "52",      "id": 28    }  ],  "dataSetDetails": [],  "engine": "scala"}