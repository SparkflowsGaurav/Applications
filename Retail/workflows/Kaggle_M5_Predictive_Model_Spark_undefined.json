{  "name": "Kaggle_M5_Predictive_Model_Spark",  "uuid": "58bba65d-638b-48be-a0cf-e70891bfa39b",  "category": "-",  "nodes": [    {      "id": "3",      "name": "Read CSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "This node reads CSV files and creates a DataFrame from it.<br>",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "98.9883px",      "y": "446.988px",      "hint": "Whenever the file is changed, Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "/home/sparkflows/fire-data/data/sell_pricesMod.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropSpecialCharacterInColumnName",          "value": "true",          "widget": "array",          "title": "Drop Special Character In ColumnName",          "description": "Drop the SpecialCharacter and Space in Column Name.",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"storeid\",\"itemid\",\"wmyrwk\",\"sellprice\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"INTEGER\",\"INTEGER\",\"DOUBLE\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "8",      "name": "Join On Common Column",      "description": "This node joins the incoming dataframes using one common column between them.",      "details": "This node joins the incoming dataframes using one common column between the two dataframes. <br>\n<br>\nSelect the Common Join Column to be used in the Join.<br>",      "examples": "",      "type": "join",      "nodeClass": "fire.nodes.etl.NodeJoinUsingColumn",      "x": "458.988px",      "y": "353.988px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinCol",          "value": "wmyrwk",          "widget": "variable_common",          "title": "Common Join Column",          "description": "column on which to join",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinType",          "value": "inner",          "widget": "array",          "title": "JoinType",          "description": "type of join",          "optionsArray": [            "inner",            "outer",            "leftouter",            "rightouter",            "leftsemi",            "leftanti"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"wmyrwk\",\"storeid\",\"itemid\",\"sellprice\",\"date\",\"weekday\",\"wday\",\"month\",\"year\",\"eventname1\",\"eventtype1\",\"eventname2\",\"eventtype2\",\"snapCA\",\"snapTX\",\"snapWI\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"INTEGER\",\"INTEGER\",\"DOUBLE\",\"DATE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "13",      "name": "Sticky Note",      "description": "Allows capturing Notes on the Workflow",      "details": "",      "examples": "",      "type": "sticky",      "nodeClass": "fire.nodes.doc.NodeStickyNote",      "x": "432.987px",      "y": "450.975px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "bgColor",          "value": "gray",          "widget": "textfield",          "title": "Bg Color",          "description": "Background of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "width",          "value": "145px",          "widget": "textfield",          "title": "Width",          "description": "Width of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "height",          "value": "73px",          "widget": "textfield",          "title": "Height",          "description": "Height of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "comment",          "value": "<p>joined common column \"wm_yr_wk\"</p>",          "widget": "textarea_rich",          "title": "Comment",          "description": "Comments for the Workflow",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "20",      "name": "Sticky Note",      "description": "Allows capturing Notes on the Workflow",      "details": "",      "examples": "",      "type": "sticky",      "nodeClass": "fire.nodes.doc.NodeStickyNote",      "x": "661.992px",      "y": "371.992px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "bgColor",          "value": "gray",          "widget": "textfield",          "title": "Bg Color",          "description": "Background of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "width",          "value": "132px",          "widget": "textfield",          "title": "Width",          "description": "Width of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "height",          "value": "61px",          "widget": "textfield",          "title": "Height",          "description": "Height of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "comment",          "value": "<p>joined on common column \"item_id\"</p>",          "widget": "textarea_rich",          "title": "Comment",          "description": "Comments for the Workflow",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "41",      "name": "Read CSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "This node reads CSV files and creates a DataFrame from it.<br>",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "96.9844px",      "y": "230.984px",      "hint": "Whenever the file is changed, Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "/home/sparkflows/fire-data/data/meltedSales_validMod.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropSpecialCharacterInColumnName",          "value": "true",          "widget": "array",          "title": "Drop Special Character In ColumnName",          "description": "Drop the SpecialCharacter and Space in Column Name.",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"c0\",\"id\",\"itemid\",\"deptid\",\"catid\",\"stateid\",\"d\",\"sales\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"STRING\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"INTEGER\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "48",      "name": "Read CSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "This node reads CSV files and creates a DataFrame from it.<br>",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "100.98px",      "y": "334.98px",      "hint": "Whenever the file is changed, Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "/home/sparkflows/fire-data/data/calendarMod.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropSpecialCharacterInColumnName",          "value": "true",          "widget": "array",          "title": "Drop Special Character In ColumnName",          "description": "Drop the SpecialCharacter and Space in Column Name.",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"date\",\"wmyrwk\",\"weekday\",\"wday\",\"month\",\"year\",\"eventname1\",\"eventtype1\",\"eventname2\",\"eventtype2\",\"snapCA\",\"snapTX\",\"snapWI\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"DATE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "50",      "name": "Join On Common Column",      "description": "This node joins the incoming dataframes using one common column between them.",      "details": "This node joins the incoming dataframes using one common column between the two dataframes. <br>\n<br>\nSelect the Common Join Column to be used in the Join.<br>",      "examples": "",      "type": "join",      "nodeClass": "fire.nodes.etl.NodeJoinUsingColumn",      "x": "699.984px",      "y": "276.984px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinCol",          "value": "itemid",          "widget": "variable_common",          "title": "Common Join Column",          "description": "column on which to join",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinType",          "value": "inner",          "widget": "array",          "title": "JoinType",          "description": "type of join",          "optionsArray": [            "inner",            "outer",            "leftouter",            "rightouter",            "leftsemi",            "leftanti"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"itemid\",\"wmyrwk\",\"storeid\",\"sellprice\",\"date\",\"weekday\",\"wday\",\"month\",\"year\",\"eventname1\",\"eventtype1\",\"eventname2\",\"eventtype2\",\"snapCA\",\"snapTX\",\"snapWI\",\"c0\",\"id\",\"deptid\",\"catid\",\"stateid\",\"d\",\"sales\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"INTEGER\",\"INTEGER\",\"DOUBLE\",\"DATE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"INTEGER\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "60",      "name": "SQL",      "description": "This node runs the given SQL on the incoming DataFrame",      "details": "This node receives an input data frame, creates a temporary table on top of that data frame.<br>\nAllows the user to write a SQL which would be executed on the temporary table.<br>\nThe resulting data frame of running the SQL is passed on to the next node.<br>",      "examples": "<h2>SQL Examples</h2>\n<br>\nBelow are some example of SQL. <br>\n<br>\nThey use the Temp Table Name to be : tempTable<br>\n<br>\nThe schem of the Input Dataframe is : id, price, lotsize, bedrooms, bathrms, stories, driveway, recroom, fullbase, gashw, airco, garagepl, prefarea<br>\n<br>\n<h4> avg price of house</h4>\n<br>\nselect avg(price) as avg_price from tempTable<br>\n<br>\n<br>\n<h4> bedrooms with avg price greater than 10000</h4>\n<br>\nselect bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000<br>\n<br>\n<br>\n<h4> house details with bedrooms avg price greater than 10000</h4>\n<br>\nselect tempTable.* , inner_table.avg_price from<br>\n(select bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000) as inner_table<br>\nJOIN tempTable ON(inner_table.bedrooms = tempTable.bedrooms)<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeSQL",      "x": "267.98px",      "y": "243.977px",      "hint": "Whenever the table is changed, go to Schema tab and Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "tempTable",          "value": "melt_temp_table",          "widget": "textfield",          "title": "Temp Table",          "description": "Temp Table Name to be used",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "sql",          "value": "select * FROM melt_temp_table LIMIT 1000",          "widget": "textarea_large",          "type": "sql",          "title": "SQL",          "description": "SQL to be run",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"c0\",\"id\",\"itemid\",\"deptid\",\"catid\",\"stateid\",\"d\",\"sales\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"STRING\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"INTEGER\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "61",      "name": "SQL",      "description": "This node runs the given SQL on the incoming DataFrame",      "details": "This node receives an input data frame, creates a temporary table on top of that data frame.<br>\nAllows the user to write a SQL which would be executed on the temporary table.<br>\nThe resulting data frame of running the SQL is passed on to the next node.<br>",      "examples": "<h2>SQL Examples</h2>\n<br>\nBelow are some example of SQL. <br>\n<br>\nThey use the Temp Table Name to be : tempTable<br>\n<br>\nThe schem of the Input Dataframe is : id, price, lotsize, bedrooms, bathrms, stories, driveway, recroom, fullbase, gashw, airco, garagepl, prefarea<br>\n<br>\n<h4> avg price of house</h4>\n<br>\nselect avg(price) as avg_price from tempTable<br>\n<br>\n<br>\n<h4> bedrooms with avg price greater than 10000</h4>\n<br>\nselect bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000<br>\n<br>\n<br>\n<h4> house details with bedrooms avg price greater than 10000</h4>\n<br>\nselect tempTable.* , inner_table.avg_price from<br>\n(select bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000) as inner_table<br>\nJOIN tempTable ON(inner_table.bedrooms = tempTable.bedrooms)<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeSQL",      "x": "269.988px",      "y": "345.984px",      "hint": "Whenever the table is changed, go to Schema tab and Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "tempTable",          "value": "cal_temp_table",          "widget": "textfield",          "title": "Temp Table",          "description": "Temp Table Name to be used",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "sql",          "value": "select * FROM cal_temp_table LIMIT 1000",          "widget": "textarea_large",          "type": "sql",          "title": "SQL",          "description": "SQL to be run",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"date\",\"wmyrwk\",\"weekday\",\"wday\",\"month\",\"year\",\"eventname1\",\"eventtype1\",\"eventname2\",\"eventtype2\",\"snapCA\",\"snapTX\",\"snapWI\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"DATE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "62",      "name": "SQL",      "description": "This node runs the given SQL on the incoming DataFrame",      "details": "This node receives an input data frame, creates a temporary table on top of that data frame.<br>\nAllows the user to write a SQL which would be executed on the temporary table.<br>\nThe resulting data frame of running the SQL is passed on to the next node.<br>",      "examples": "<h2>SQL Examples</h2>\n<br>\nBelow are some example of SQL. <br>\n<br>\nThey use the Temp Table Name to be : tempTable<br>\n<br>\nThe schem of the Input Dataframe is : id, price, lotsize, bedrooms, bathrms, stories, driveway, recroom, fullbase, gashw, airco, garagepl, prefarea<br>\n<br>\n<h4> avg price of house</h4>\n<br>\nselect avg(price) as avg_price from tempTable<br>\n<br>\n<br>\n<h4> bedrooms with avg price greater than 10000</h4>\n<br>\nselect bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000<br>\n<br>\n<br>\n<h4> house details with bedrooms avg price greater than 10000</h4>\n<br>\nselect tempTable.* , inner_table.avg_price from<br>\n(select bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000) as inner_table<br>\nJOIN tempTable ON(inner_table.bedrooms = tempTable.bedrooms)<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeSQL",      "x": "278.988px",      "y": "449.988px",      "hint": "Whenever the table is changed, go to Schema tab and Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "tempTable",          "value": "sell_temp_table",          "widget": "textfield",          "title": "Temp Table",          "description": "Temp Table Name to be used",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "sql",          "value": "select * FROM sell_temp_table LIMIT 1000",          "widget": "textarea_large",          "type": "sql",          "title": "SQL",          "description": "SQL to be run",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"storeid\",\"itemid\",\"wmyrwk\",\"sellprice\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"INTEGER\",\"INTEGER\",\"DOUBLE\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "63",      "name": "Sticky Note",      "description": "Allows capturing Notes on the Workflow",      "details": "",      "examples": "",      "type": "sticky",      "nodeClass": "fire.nodes.doc.NodeStickyNote",      "x": "104px",      "y": "13px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "bgColor",          "value": "gray",          "widget": "textfield",          "title": "Bg Color",          "description": "Background of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "width",          "value": "587.007812px",          "widget": "textfield",          "title": "Width",          "description": "Width of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "height",          "value": "174.007812px",          "widget": "textfield",          "title": "Height",          "description": "Height of note",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "comment",          "value": "<p><strong>M5 Forecast</strong></p><p><br></p><p><strong>Kaggle competition</strong> - https://www.kaggle.com/competitions/m5-forecasting-accuracy/data</p><p><br></p><p><strong>Focus:</strong> <span style=\"color: rgba(0, 0, 0, 0.7);\">predicting item sales at stores in various locations</span></p><p><br></p><p><strong style=\"color: rgba(0, 0, 0, 0.7);\">Data: </strong><u style=\"color: rgba(0, 0, 0, 0.7);\">calendar.csv</u><strong style=\"color: rgba(0, 0, 0, 0.7);\"> - </strong><span style=\"color: rgba(0, 0, 0, 0.7);\">contains information about the dates on which the products are sold</span></p><p><u style=\"color: rgba(0, 0, 0, 0.7);\">sell_prices.csv</u><span style=\"color: rgba(0, 0, 0, 0.7);\"> - contains information about the price of the products sold per store and date</span></p><p><u style=\"color: rgba(0, 0, 0, 0.7);\">meltedSales_valid.csv</u><span style=\"color: rgba(0, 0, 0, 0.7);\"> - contains the historical daily unit sales data per product and store&nbsp;</span></p>",          "widget": "textarea_rich",          "title": "Comment",          "description": "Comments for the Workflow",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "68",      "name": "SQL",      "description": "This node runs the given SQL on the incoming DataFrame",      "details": "This node receives an input data frame, creates a temporary table on top of that data frame.<br>\nAllows the user to write a SQL which would be executed on the temporary table.<br>\nThe resulting data frame of running the SQL is passed on to the next node.<br>",      "examples": "<h2>SQL Examples</h2>\n<br>\nBelow are some example of SQL. <br>\n<br>\nThey use the Temp Table Name to be : tempTable<br>\n<br>\nThe schem of the Input Dataframe is : id, price, lotsize, bedrooms, bathrms, stories, driveway, recroom, fullbase, gashw, airco, garagepl, prefarea<br>\n<br>\n<h4> avg price of house</h4>\n<br>\nselect avg(price) as avg_price from tempTable<br>\n<br>\n<br>\n<h4> bedrooms with avg price greater than 10000</h4>\n<br>\nselect bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000<br>\n<br>\n<br>\n<h4> house details with bedrooms avg price greater than 10000</h4>\n<br>\nselect tempTable.* , inner_table.avg_price from<br>\n(select bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000) as inner_table<br>\nJOIN tempTable ON(inner_table.bedrooms = tempTable.bedrooms)<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeSQL",      "x": "794.8px",      "y": "145px",      "hint": "Whenever the table is changed, go to Schema tab and Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "tempTable",          "value": "fire_temp_table",          "widget": "textfield",          "title": "Temp Table",          "description": "Temp Table Name to be used",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "sql",          "value": "select DISTINCT id FROM fire_temp_table",          "widget": "textarea_large",          "type": "sql",          "title": "SQL",          "description": "SQL to be run",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"id\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"STRING\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "69",      "name": "Zip With Index",      "description": "This node Generates a new column with unique Index/Value for each row in the Dataset",      "details": "This node Generates a new column with unique Index/Value for each row in the Dataset.<br>\n<br>\nThis column is added to the outgoing Dataframe. It can be used to access a row within the Dataframe.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\n<br>\nIf ZipWithIndex node is configured to create an index column as [INDEX_COL]<br>\nthen outgoing Dataframe would be created as below containing the index column:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY         |    INDEX_COL    <br>\n-------------------------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00  |    0<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00  |    1<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00   |    2<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00  |    3<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeZipWithIndex",      "x": "912.8px",      "y": "129px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "indexColName",          "value": "Id_new",          "widget": "textfield",          "title": "Index Column Name",          "description": "Index column name",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "70",      "name": "Join Using SQL",      "description": "This node registers the incoming DataFrames as temporary tables and executes the SQL provided",      "details": "<ul>\n<li> This node receives two input data frames, creates two temporary tables on top of that data frames.</li>\n<li> Allows the user to write a SQL query to join these two temporary tables.</li>\n<li> The resulting data frame of running the SQL is passed on to the next node.</li>\n</ul>",      "examples": "<h2>Examples</h2>\n<br>\n<ul>\n<li> select col1, col2, col3, col4, col5, col6 from tempTable1 a LEFT JOIN tempTable2 b ON(a.col1 = b.col5)</li>\n<li> select col1, col2, col3 from tempTable1 a JOIN  tempTable2 b ON(a.col2 = b.col3)</li>\n</ul>",      "type": "join",      "nodeClass": "fire.nodes.etl.NodeJoinUsingSQL",      "x": "991.8px",      "y": "212px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "tempTables",          "value": "[\"tempTable1\",\"tempTable2\"]",          "widget": "array_of_values",          "title": "Temp Table Names",          "description": "Temp Table Name to be used",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "sql",          "value": "SELECT B.*,A.Id_new FROM tempTable1 A join tempTable2 B on A.id=B.id",          "widget": "textarea_large",          "type": "sql",          "title": "SQL",          "description": "SQL to be run",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"itemid\",\"wmyrwk\",\"storeid\",\"sellprice\",\"date\",\"weekday\",\"wday\",\"month\",\"year\",\"eventname1\",\"eventtype1\",\"eventname2\",\"eventtype2\",\"snapCA\",\"snapTX\",\"snapWI\",\"c0\",\"id\",\"deptid\",\"catid\",\"stateid\",\"d\",\"sales\",\"Id_new\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"INTEGER\",\"INTEGER\",\"INTEGER\",\"DOUBLE\",\"DATE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"INTEGER\",\"LONG\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "71",      "name": "SQL",      "description": "This node runs the given SQL on the incoming DataFrame",      "details": "This node receives an input data frame, creates a temporary table on top of that data frame.<br>\nAllows the user to write a SQL which would be executed on the temporary table.<br>\nThe resulting data frame of running the SQL is passed on to the next node.<br>",      "examples": "<h2>SQL Examples</h2>\n<br>\nBelow are some example of SQL. <br>\n<br>\nThey use the Temp Table Name to be : tempTable<br>\n<br>\nThe schem of the Input Dataframe is : id, price, lotsize, bedrooms, bathrms, stories, driveway, recroom, fullbase, gashw, airco, garagepl, prefarea<br>\n<br>\n<h4> avg price of house</h4>\n<br>\nselect avg(price) as avg_price from tempTable<br>\n<br>\n<br>\n<h4> bedrooms with avg price greater than 10000</h4>\n<br>\nselect bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000<br>\n<br>\n<br>\n<h4> house details with bedrooms avg price greater than 10000</h4>\n<br>\nselect tempTable.* , inner_table.avg_price from<br>\n(select bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000) as inner_table<br>\nJOIN tempTable ON(inner_table.bedrooms = tempTable.bedrooms)<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeSQL",      "x": "971.787px",      "y": "356px",      "hint": "Whenever the table is changed, go to Schema tab and Refresh the Schema",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "tempTable",          "value": "fire_temp_table",          "widget": "textfield",          "title": "Temp Table",          "description": "Temp Table Name to be used",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "sql",          "value": "select DISTINCT d FROM fire_temp_table",          "widget": "textarea_large",          "type": "sql",          "title": "SQL",          "description": "SQL to be run",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"d\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"STRING\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "72",      "name": "Zip With Index",      "description": "This node Generates a new column with unique Index/Value for each row in the Dataset",      "details": "This node Generates a new column with unique Index/Value for each row in the Dataset.<br>\n<br>\nThis column is added to the outgoing Dataframe. It can be used to access a row within the Dataframe.<br>",      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\n<br>\nIf ZipWithIndex node is configured to create an index column as [INDEX_COL]<br>\nthen outgoing Dataframe would be created as below containing the index column:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY         |    INDEX_COL    <br>\n-------------------------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00  |    0<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00  |    1<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00   |    2<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00  |    3<br>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeZipWithIndex",      "x": "941.8px",      "y": "458px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "indexColName",          "value": "d_new",          "widget": "textfield",          "title": "Index Column Name",          "description": "Index column name",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "74",      "name": "Cast To Single Type",      "description": "This node creates a new DataFrame by casting the specified input columns to a new data type",      "details": "This node creates a new DataFrame by casting the specified input columns to a new data type. All the selected columns would be cast to the specified data type.<br>\n<br>\nThe boolean field Replace Existing Columns indicates whether the existing column should be replaced or a new column should be created.<br>",      "examples": "If incoming Dataframe has following columns with below specified datatype:<br>\n<br>\n<ul>\n<li> CUST_ID : Integer</li>\n<li> CUST_NAME : String</li>\n<li> DOB : Datetime</li>\n<li> AGE : Integer</li>\n</ul>\nand [DOB] and [AGE] are selected for casting to [STRING] datatype then outgoing Dataframe would have below datatypes:<br>\n<br>\n<ul>\n<li> CUST_ID : Integer</li>\n<li> CUST_NAME : String</li>\n<li> DOB : String</li>\n<li> AGE : String</li>\n</ul>",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeCastColumnType",      "x": "710.8px",      "y": "481px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputCols",          "value": "[\"wmyrwk\",\"storeid\",\"sellprice\",\"weekday\",\"wday\",\"month\",\"year\",\"eventname1\",\"eventtype1\",\"eventname2\",\"eventtype2\",\"snapCA\",\"snapTX\",\"snapWI\",\"c0\",\"Id_new\",\"d_new\",\"deptid\",\"catid\",\"stateid\",\"sales\"]",          "widget": "variables",          "title": "Columns",          "description": "Columns to be cast to new data type",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColType",          "value": "DOUBLE",          "widget": "array",          "title": "New Data Type",          "description": "New data type for the selected columns (INTEGER, DOUBLE, STRING, LONG, SHORT)",          "optionsArray": [            "BOOLEAN",            "BYTE",            "DATE",            "DECIMAL",            "DOUBLE",            "FLOAT",            "INTEGER",            "LONG",            "SHORT",            "STRING",            "TIMESTAMP"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "replaceExistingCols",          "value": "true",          "widget": "array",          "title": "Replace Existing Cols?",          "description": "Whether to replace existing columns or create new ones?",          "optionsArray": [            "true",            "false"          ],          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "75",      "name": "Vector Assembler",      "description": "Merges multiple columns into a vector column",      "details": "VectorAssembler is a transformer that combines a given list of columns into a single vector column. <br>\nIt is useful for combining raw features and features generated by different feature transformers into a single feature vector, in order to train ML models like logistic regression and decision trees. <br>\nVectorAssembler accepts the following input column types: all numeric types, boolean type, and vector type. In each row, the values of the input columns will be concatenated into a vector in the specified order.<br>\n<br>\nMore details are available at:<br>\n<br>\n<a href=\"https://spark.apache.org/docs/latest/ml-features.html#vectorassembler\" target=\"_blank\">spark.apache.org/docs/latest/ml-features.html#vectorassembler</a><br>",      "examples": "<h2>The below example is available at : <a href=\"https://spark.apache.org/docs/latest/ml-features.html#vectorassembler\" target=\"_blank\">spark.apache.org/docs/latest/ml-features.html#vectorassembler</a></h2>\n<br>\nimport org.apache.spark.ml.feature.VectorAssembler<br>\nimport org.apache.spark.ml.linalg.Vectors<br>\n<br>\nval dataset = spark.createDataFrame(<br>\n  Seq((0, 18, 1.0, Vectors.dense(0.0, 10.0, 0.5), 1.0))<br>\n).toDF(\"id\", \"hour\", \"mobile\", \"userFeatures\", \"clicked\")<br>\n<br>\nval assembler = new VectorAssembler()<br>\n  .setInputCols(Array(\"hour\", \"mobile\", \"userFeatures\"))<br>\n  .setOutputCol(\"features\")<br>\n<br>\nval output = assembler.transform(dataset)<br>\nprintln(\"Assembled columns 'hour', 'mobile', 'userFeatures' to vector column 'features'\")<br>\noutput.select(\"features\", \"clicked\").show(false)<br>",      "type": "ml-transformer",      "nodeClass": "fire.nodes.ml.NodeVectorAssembler",      "x": "618.8px",      "y": "498px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "inputCols",          "value": "[\"wmyrwk\",\"storeid\",\"sellprice\",\"weekday\",\"wday\",\"month\",\"year\",\"eventname1\",\"eventtype1\",\"eventname2\",\"eventtype2\",\"snapCA\",\"snapTX\",\"snapWI\",\"c0\",\"deptid\",\"catid\",\"stateid\",\"Id_new\",\"d_new\"]",          "widget": "variables",          "title": "Input Columns",          "description": "Input column of type - all numeric, boolean and vector",          "datatypes": [            "integer",            "long",            "double",            "float",            "vectorudt"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputCol",          "value": "vectoruid",          "widget": "textfield",          "title": "Output Column",          "description": "Output column name",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "handleInvalid",          "value": "error",          "widget": "array",          "title": "HandleInvalid",          "description": "How to handle invalid data (NULL values). Options are 'skip' (filter out rows with invalid data), 'error' (throw an error), or 'keep' (return relevant number of NaN in the output).",          "optionsArray": [            "error",            "skip",            "keep"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "76",      "name": "Split",      "description": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data. For example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).",      "details": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data.<br>\n<br>\nFor example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).<br>\n<br>\nThe split node can be used for splitting the DataFrame for training and test datasets used in Machine Learning.<br>",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.ml.NodeSplit",      "x": "603.775px",      "y": "618.2px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "fraction1",          "value": ".8",          "widget": "textfield",          "title": "Fraction 1",          "description": "Fraction to be used for Splitting the DataFrame into two. The first DataFrame would go to the lower edge output. The other would go to the higher edge output.",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "77",      "name": "GBT Regression",      "description": "It supports both continuous and categorical features.",      "details": "Gradient-Boosted Trees (GBTs) are ensembles of decision trees. GBTs iteratively train decision trees in order to minimize a loss function. <br>\nThe spark.ml implementation supports GBTs for binary classification and for regression, using both continuous and categorical features.<br>\n<br>\nMore details are available at Apache Spark ML docs page:<br>\n<br>\n<a href=\"http://spark.apache.org/docs/latest/ml-classification-regression.html#gradient-boosted-tree-regression\" target=\"_blank\">spark.apache.org/docs/latest/ml-classification-regression.html#gradient-boosted-tree-regression</a><br>",      "examples": "Below example is available at : <a href=\"https://spark.apache.org/docs/latest/ml-classification-regression.html#gradient-boosted-tree-regression\" target=\"_blank\">spark.apache.org/docs/latest/ml-classification-regression.html#gradient-boosted-tree-regression</a><br>\n<br>\n<br>\nimport org.apache.spark.ml.Pipeline<br>\nimport org.apache.spark.ml.evaluation.RegressionEvaluator<br>\nimport org.apache.spark.ml.feature.VectorIndexer<br>\nimport org.apache.spark.ml.regression.{GBTRegressionModel, GBTRegressor}<br>\n<br>\n// Load and parse the data file, converting it to a DataFrame.<br>\nval data = spark.read.format(\"libsvm\").load(\"data/mllib/sample_libsvm_data.txt\")<br>\n<br>\n// Automatically identify categorical features, and index them.<br>\n// Set maxCategories so features with > 4 distinct values are treated as continuous.<br>\nval featureIndexer = new VectorIndexer()<br>\n  .setInputCol(\"features\")<br>\n  .setOutputCol(\"indexedFeatures\")<br>\n  .setMaxCategories(4)<br>\n  .fit(data)<br>\n<br>\n// Split the data into training and test sets (30% held out for testing).<br>\nval Array(trainingData, testData) = data.randomSplit(Array(0.7, 0.3))<br>\n<br>\n// Train a GBT model.<br>\nval gbt = new GBTRegressor()<br>\n  .setLabelCol(\"label\")<br>\n  .setFeaturesCol(\"indexedFeatures\")<br>\n  .setMaxIter(10)<br>\n<br>\n// Chain indexer and GBT in a Pipeline.<br>\nval pipeline = new Pipeline()<br>\n  .setStages(Array(featureIndexer, gbt))<br>\n<br>\n// Train model. This also runs the indexer.<br>\nval model = pipeline.fit(trainingData)<br>\n<br>\n// Make predictions.<br>\nval predictions = model.transform(testData)<br>\n<br>\n// Select example rows to display.<br>\npredictions.select(\"prediction\", \"label\", \"features\").show(5)<br>\n<br>\n// Select (prediction, true label) and compute test error.<br>\nval evaluator = new RegressionEvaluator()<br>\n  .setLabelCol(\"label\")<br>\n  .setPredictionCol(\"prediction\")<br>\n  .setMetricName(\"rmse\")<br>\nval rmse = evaluator.evaluate(predictions)<br>\nprintln(s\"Root Mean Squared Error (RMSE) on test data = $rmse\")<br>\n<br>\nval gbtModel = model.stages(1).asInstanceOf[GBTRegressionModel]<br>\nprintln(s\"Learned regression GBT model:\\n ${gbtModel.toDebugString}\")<br>",      "type": "ml-estimator",      "nodeClass": "fire.nodes.ml.NodeGBTRegression",      "x": "513.8px",      "y": "706.6px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "featuresCol",          "value": "vectoruid",          "widget": "variable",          "title": "Features Column",          "description": "Features column of type vectorUDT for model fitting",          "datatypes": [            "vectorudt"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "labelCol",          "value": "sales",          "widget": "variable",          "title": "Label Column",          "description": "The label column for model fitting",          "datatypes": [            "double"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "predictionCol",          "value": "",          "widget": "textfield",          "title": "Prediction Column",          "description": "The prediction column created during model scoring.",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "impurity",          "value": "variance",          "widget": "array",          "title": "Impurity",          "description": "The Criterion used for information gain calculation",          "optionsArray": [            "variance"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "lossType",          "value": "squared",          "widget": "array",          "title": "Loss Function",          "description": "The Loss function which GBT tries to minimize",          "optionsArray": [            "squared",            "absolute"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxBins",          "value": "32",          "widget": "textfield",          "title": "Max Bins",          "description": "The maximum number of bins used for discretizing continuous features.Must be >= 2 and >= number of categories in any categorical feature.",          "datatypes": [            "integer"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxDepth",          "value": "5",          "widget": "textfield",          "title": "Max Depth",          "description": "The Maximum depth of a tree",          "datatypes": [            "integer"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxIter",          "value": "20",          "widget": "textfield",          "title": "Max Iterations",          "description": "The maximum number of iterations(>=0)(a.k.a numtrees)",          "datatypes": [            "integer"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "minInfoGain",          "value": "0.0",          "widget": "textfield",          "title": "Min Information Gain",          "description": "The Minimum information gain for a split to be considered at a tree node",          "datatypes": [            "double"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "minInstancesPerNode",          "value": "1",          "widget": "textfield",          "title": "Min Instances Per Node",          "description": "The Minimum number of instances each child must have after split",          "datatypes": [            "integer"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "subsamplingRate",          "value": "1.0",          "widget": "textfield",          "title": "Subsampling Rate",          "description": "The fraction of the training data used for learning each decision tree.",          "datatypes": [            "double"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "seed",          "value": "",          "widget": "textfield",          "title": "Seed",          "description": "The random seed",          "datatypes": [            "long"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "stepSize",          "value": "0.1",          "widget": "textfield",          "title": "Step Size",          "description": "Step size (a.k.a. learning rate), The step size to be used for each iteration of optimization.",          "datatypes": [            "double"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "cacheNodeIds",          "value": "false",          "widget": "array",          "title": "Cache Node Ids",          "description": "The caching nodes IDs. Can speed up training of deeper trees.",          "datatypes": [            "boolean"          ],          "optionsArray": [            "false",            "true"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "checkpointInterval",          "value": "10",          "widget": "textfield",          "title": "Checkpoint Interval",          "description": "The checkpoint interval. E.g. 10 means that the cache will get checkpointed every 10 iterations.Set checkpoint interval (>= 1) or disable checkpoint (-1)",          "datatypes": [            "integer"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxMemoryInMB",          "value": "256",          "widget": "textfield",          "title": "Max memory",          "description": "Maximum memory in MB allocated to histogram aggregation.",          "datatypes": [            "integer"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "gridSearch",          "value": "",          "widget": "tab",          "title": "Grid Search",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "minInfoGainGrid",          "value": "",          "widget": "textfield",          "title": "Min Info Gain Grid Search",          "description": "Min Info Gain Grid Search",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxBinsGrid",          "value": "",          "widget": "textfield",          "title": "Max Bins Grid Search",          "description": "Max Bins for Grid Search",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxDepthGrid",          "value": "",          "widget": "textfield",          "title": "Max Depth Grid Search",          "description": "Regularization Parameters for Grid Search",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "maxIterGrid",          "value": "",          "widget": "textfield",          "title": "Max Iterations Grid Search",          "description": "Max Iterations for Grid Search",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "78",      "name": "Spark Predict",      "description": "Predict node takes in a DataFrame and Model and makes predictions",      "details": "Predict node takes in a DataFrame and Model and makes predictions on the data using the Model.<br>",      "examples": "",      "type": "ml-predict",      "nodeClass": "fire.nodes.ml.NodePredict",      "x": "393.8px",      "y": "618.2px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "79",      "name": "Regression Evaluator",      "description": "Evaluator for regression, which expects two input columns: prediction and label.",      "details": "Evaluator for regression, which expects two input columns: prediction and label.<br>\n<br>\nMore details are available at Apache Spark ML docs page:<br>\n<br>\n<a href=\"https://spark.apache.org/docs/latest/api/java/org/apache/spark/ml/evaluation/RegressionEvaluator.html\" target=\"_blank\">spark.apache.org/docs/latest/api/java/org/apache/spark/ml/evaluation/RegressionEvaluator.html</a><br>",      "examples": "",      "type": "ml-evaluator",      "nodeClass": "fire.nodes.ml.NodeRegressionEvaluator",      "x": "241.8px",      "y": "574.2px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "labelCol",          "value": "sales",          "widget": "variable",          "title": "Label Column",          "description": "The label column for model fitting.",          "datatypes": [            "double"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "predictionCol",          "value": "prediction",          "widget": "variable",          "title": "Prediction Column",          "description": "The prediction column.",          "datatypes": [            "double"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "metricName",          "value": "r2",          "widget": "array",          "title": "Metric Name",          "description": "The metric used in evaluation.",          "optionsArray": [            "rmse",            "mse",            "r2",            "mae"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "80",      "name": "Join On Common Column",      "description": "This node joins the incoming dataframes using one common column between them.",      "details": "This node joins the incoming dataframes using one common column between the two dataframes. <br>\n<br>\nSelect the Common Join Column to be used in the Join.<br>",      "examples": "",      "type": "join",      "nodeClass": "fire.nodes.etl.NodeJoinUsingColumn",      "x": "817px",      "y": "487px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinCol",          "value": "d",          "widget": "variable_common",          "title": "Common Join Column",          "description": "column on which to join",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "joinType",          "value": "inner",          "widget": "array",          "title": "JoinType",          "description": "type of join",          "optionsArray": [            "inner",            "outer",            "leftouter",            "rightouter",            "leftsemi",            "leftanti"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"d\",\"itemid\",\"wmyrwk\",\"storeid\",\"sellprice\",\"date\",\"weekday\",\"wday\",\"month\",\"year\",\"eventname1\",\"eventtype1\",\"eventname2\",\"eventtype2\",\"snapCA\",\"snapTX\",\"snapWI\",\"c0\",\"id\",\"deptid\",\"catid\",\"stateid\",\"sales\",\"Id_new\",\"d_new\"]",          "widget": "schema_col_names",          "title": "Output Column Names",          "description": "Name of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"STRING\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"DOUBLE\",\"DATE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"LONG\",\"LONG\"]",          "widget": "schema_col_types",          "title": "Output Column Types",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Output Column Formats",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "81",      "name": "Print N Rows",      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",      "details": "This node is used to print incoming dataset.<br>\n<br>\nNumber of rows that needs to be printed can be configured in the node.<br>",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",      "x": "192.975px",      "y": "714.6px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "title",          "value": "Row Values",          "widget": "textfield",          "title": "Title",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "n",          "value": "10",          "widget": "textfield",          "title": "Num Rows to Print",          "description": "number of rows to be printed",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "displayDataType",          "value": "true",          "widget": "array",          "title": "Display Data Type",          "description": "If true display rows DataType",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    }  ],  "edges": [    {      "source": "8",      "target": "50",      "id": 1    },    {      "source": "3",      "target": "62",      "id": 2    },    {      "source": "62",      "target": "8",      "id": 3    },    {      "source": "48",      "target": "61",      "id": 4    },    {      "source": "61",      "target": "8",      "id": 5    },    {      "source": "41",      "target": "60",      "id": 6    },    {      "source": "60",      "target": "50",      "id": 7    },    {      "source": "50",      "target": "68",      "id": 8    },    {      "source": "68",      "target": "69",      "id": 9    },    {      "source": "69",      "target": "70",      "id": 10    },    {      "source": "50",      "target": "70",      "id": 11    },    {      "source": "70",      "target": "71",      "id": 12    },    {      "source": "71",      "target": "72",      "id": 13    },    {      "source": "74",      "target": "75",      "id": 14    },    {      "source": "75",      "target": "76",      "id": 15    },    {      "source": "76",      "target": "77",      "id": 16    },    {      "source": "76",      "target": "78",      "id": 17    },    {      "source": "77",      "target": "78",      "id": 18    },    {      "source": "78",      "target": "79",      "id": 19    },    {      "source": "70",      "target": "80",      "id": 20    },    {      "source": "72",      "target": "80",      "id": 21    },    {      "source": "80",      "target": "74",      "id": 22    },    {      "source": "78",      "target": "81",      "id": 23    }  ],  "dataSetDetails": [],  "engine": "scala"}