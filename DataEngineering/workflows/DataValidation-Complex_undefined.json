{	"name": "DataValidation - Complex",	"uuid": "3ce0505a-559a-46d0-a6f5-b5675117e272",	"category": "Data Validation",	"nodes": [		{			"id": "1",			"name": "Dataset Structured",			"description": "This Node creates a DataFrame by reading data from HDFS, HIVE etc. The dataset has been defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.",			"details": "This Node creates a DataFrame by reading data from HDFS, HIVE etc.<br>\n<br>\nThe data has been defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.<br>",			"examples": "",			"type": "dataset",			"nodeClass": "fire.nodes.dataset.NodeDatasetStructured",			"x": "366.863px",			"y": "284.975px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "dataset",					"value": "a7bb5d77-c172-4cff-bb27-dc0ba1e0039c",					"widget": "dataset",					"title": "Dataset",					"description": "Selected Dataset",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "2",			"name": "Dataset Structured",			"description": "This Node creates a DataFrame by reading data from HDFS, HIVE etc. The dataset has been defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.",			"details": "This Node creates a DataFrame by reading data from HDFS, HIVE etc.<br>\n<br>\nThe data has been defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.<br>",			"examples": "",			"type": "dataset",			"nodeClass": "fire.nodes.dataset.NodeDatasetStructured",			"x": "245.925px",			"y": "71.9375px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "dataset",					"value": "f38859a7-c1d8-4e7a-8b87-c57d4a77df20",					"widget": "dataset",					"title": "Dataset",					"description": "Selected Dataset",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "3",			"name": "Compare Datasets",			"description": "Validate the input datasets",			"details": "This node compares two incoming Dataframes and if set of fields of both Dataframes matches <br>\nthen creates three outgoing Dataframe <br>\none having rows present in 1st but not in 2nd, second one having rows present in 2nd but not in 1st and third one with common rows. <br>\n<br>\nIt doesn't result in any output if set of fields of incoming Dataframes are different.<br>",			"examples": "1st Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT<br>\n----------------------------------------------<br>\nE01       |    DAVID       |    HR<br>\nE02       |    JOHN        |    SALES<br>\nE03       |    MARTIN      |    MARKETING<br>\n<br>\n2nd Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT<br>\n----------------------------------------------<br>\nE03       |    MARTIN      |    MARKETING<br>\nE04       |    TONY        |    MARKETING<br>\nE05       |    MARK        |    HR<br>\n<br>\nexecution of CompareDatasets node would result in below three outgoing Dataframes:<br>\n<br>\n<h2> Outgoing Dataframe with rows present in 1st but not in 2nd</h2>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT<br>\n----------------------------------------------<br>\nE01       |    DAVID       |    HR<br>\nE02       |    JOHN        |    SALES<br>\n<br>\n<h2> Outgoing Dataframe with rows present in 2nd but not in 1st</h2>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT<br>\n----------------------------------------------<br>\nE04       |    TONY        |    MARKETING<br>\nE05       |    MARK        |    HR<br>\n<br>\n<h2> Outgoing Dataframe with rows present in both</h2>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT<br>\n----------------------------------------------<br>\nE03       |    MARTIN      |    MARKETING<br>\n<br>\nif incoming Dataframes have different fields either having different Column Names or different count of columns then outgoing Dataframe won't be created.<br>",			"type": "join",			"nodeClass": "fire.nodes.validation.NodeCompareDatasets",			"x": "360.975px",			"y": "66.95px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "scala"		},		{			"id": "4",			"name": "Present in 1st Not in 2nd",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "551.975px",			"y": "6.875px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Rows present in 1st dataset and not in 2nd",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "5",			"name": "Present in 2nd Not in 1st",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "659.963px",			"y": "84.9375px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Rows present in 2nd and not in 1st",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "6",			"name": "Present in Both",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "543.975px",			"y": "128.963px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Rows present in both",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "7",			"name": "Sticky Note",			"description": "Allows capturing Notes on the Workflow",			"details": "",			"examples": "",			"type": "sticky",			"nodeClass": "fire.nodes.doc.NodeStickyNote",			"x": "749px",			"y": "31px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bgColor",					"value": "yellow",					"widget": "textfield",					"title": "Bg Color",					"description": "Background of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "width",					"value": "316px",					"widget": "textfield",					"title": "Width",					"description": "Width of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "height",					"value": "135px",					"widget": "textfield",					"title": "Height",					"description": "Height of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "comment",					"value": "<p><span style=\"color: rgb(74, 74, 74);\">This demonstrates usage of Compare Datasets node to compare incoming datasets and create 3 output datasets - Present in 1st but not in 2nd, present in 2nd but not in 1st and Common rows in both.</span></p>",					"widget": "textarea_rich",					"title": "Comment",					"description": "Comments for the Workflow",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "8",			"name": "Node Schema Validation",			"description": "This node to do the defined schema validation.",			"details": "This node compares schema of the incoming Dataframe against one defined in the node and creates two outgoing DataFrames<br>\n<ul>\n<li> schema validation Dataframe</li>\n<li> Dataframe after imputing default values.  </li>\n</ul>\nValidation definition for multiple columns can be entered in separate row.<br>",			"examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT    |    SALARY    |    AGE    <br>\n------------------------------------------------------------------------<br>\nstring    |    string      |    string  |    string    |    integer    <br>\n------------------------------------------------------------------------<br>\nE01       |    ANTHONY     |    HR      |    50000     |    40<br>\nE02       |    LISA        |    HR      |              |    35<br>\nE03       |    MARTIN      |            |    20000     |    25<br>\nE04       |    DAVID       |    SALES   |    55000     |    40<br>\nE05       |    MARK        |    SALES   |    60000     |      <br>\nE06       |    JOE         |    SALES   |    40000     |      <br>\nE07       |    BELLA       |    HR      |    60000     |    24<br>\n<br>\nif following Validation Rules are defined in SchemaValidation node:<br>\nEMP_NAME,string,true,NO NAME<br>\nDEPT,string,true,ORG EMPLOYEE<br>\nSALARY,integer,false,1<br>\nAGE,integer,true,25<br>\n<br>\nthen outgoing Dataframes would be created as below:<br>\n<br>\n<h2> SchemaValidation created after comparing Schema of incoming Dataframe against Rules defined</h2>\n<br>\nColumn Name    |    Column Type    |    Input Column Type<br>\n--------------------------------------------------------------<br>\nEMP_NAME       |    string         |    string<br>\nDEPT           |    string         |    string<br>\nSALARY         |    string         |    integer<br>\nAGE            |    integer        |    integer<br>\n<br>\n<h2> outgoing Dataframe created after imputing missing values with Default values mentioned in Validation Rules</h2>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT                |    SALARY    |    AGE    <br>\n---------------------------------------------------------------------------------<br>\nstring    |    string      |    string              |    string    |    integer    <br>\n---------------------------------------------------------------------------------<br>\nE01       |    ANTHONY     |    HR                  |    50000     |    40<br>\nE02       |    LISA        |    HR                  |    1         |    35<br>\nE03       |    MARTIN      |    ORG EMPLOYEE        |    20000     |    25<br>\nE04       |    DAVID       |    SALES               |    55000     |    40<br>\nE05       |    MARK        |    SALES               |    60000     |    25  <br>\nE06       |    JOE         |    SALES               |    40000     |    25  <br>\nE07       |    BELLA       |    HR                  |    60000     |    24<br>",			"type": "transform",			"nodeClass": "fire.nodes.validation.NodeSchemaValidation",			"x": "509.987px",			"y": "234.975px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "validation",					"value": "EMP_NAME,string,true,NO NAME\nDEPT,string,true,ORG EMPLOYEE\nSALARY,integer,false,1\nAGE,integer,true,25",					"widget": "textarea_large",					"title": "Validation",					"description": "Column Name, Column Type, Required & Default Value to check separated by ,",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "scala"		},		{			"id": "9",			"name": "Node Schema Validation Result",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "648.975px",			"y": "233.975px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Dataset after imputing missing values",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "10",			"name": "Sticky Note",			"description": "Allows capturing Notes on the Workflow",			"details": "",			"examples": "",			"type": "sticky",			"nodeClass": "fire.nodes.doc.NodeStickyNote",			"x": "739px",			"y": "231.988px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bgColor",					"value": "yellow",					"widget": "textfield",					"title": "Bg Color",					"description": "Background of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "width",					"value": "324px",					"widget": "textfield",					"title": "Width",					"description": "Width of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "height",					"value": "89px",					"widget": "textfield",					"title": "Height",					"description": "Height of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "comment",					"value": "<p><span style=\"color: rgb(74, 74, 74);\">Validates incoming dataset schema against defined schema validation rules. It also imputes missing values as per rules definition.</span></p>",					"widget": "textarea_rich",					"title": "Comment",					"description": "Comments for the Workflow",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "11",			"name": "Validate Fields Advanced",			"description": "Validation Multiple Node",			"details": "This node creates two outgoing Dataframes based on the result of Validation Rules on the incoming Dataframe. <br>\nFirst outgoing Dataframe consists of rows that succeeds the Validation Rules and second one consists of failed rows.   <br>\n<br>\nThis node facilitates checking of multiple conditions in each rule joined by AND or OR.<br>\n<br>\nMultiple validation rules can be defined for multiple columns. Succeeded and Failed Dataframes are created by applying all the validation rules on the incoming Dataframes.<br>",			"examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD       |    EMP_NAME       |    DEPT       |    SALARY       |    AGE       |    DATE_OF_JOINING       |    EMAIL<br>\n------------------------------------------------------------------------------------------------------------------------------------<br>\nE01          |    ANTHONY        |    HR         |    50000        |    40        |    2020-12-12            |    anthony@hrdept.com<br>\nE02          |    LISA           |    HR         |    35000        |    35        |    2021-02-30            |    lisa@hrdept.com<br>\nE03          |    MARTIN         |    HR         |    20000        |    25        |    2020-01-01            |    martin@nodept.com<br>\nE04          |    DAVID          |    SALES      |    55000        |    40        |    2021-13-13            |    david@salesdept.com<br>\nE05          |    MARK           |    SALES      |    60000        |    27        |    2020-01-01            |    mark@salesdept.com<br>\nE06          |    JOE            |    SALES      |    40000        |    31        |    2010-01-01            |    joe@salesdept.com<br>\nE07          |    BELLA          |    HR         |    60000        |    24        |    2001-12-12            |    bella@hrdept.com<br>\n<br>\nif following Validation Rules are defined in Validation node:<br>\n<br>\nCOLUMNS       |    FUNCTION             |    VALUES       |    CONDITION    |    FUNCTION               |    VALUES<br>\n------------------------------------------------------------------------------------------------------------------------<br>\nAGE           |    VALUE_GREATER_THAN   |    30           |    AND          |    VALUE_LESS_THAN        |    41<br>\nEMP_NAME      |    LENGTH_GREATER_THAN  |    2            |    AND          |    LENGTH_LESS_THAN       |    5<br>\n<br>\nthen outgoing Dataframes would be created as below:<br>\n<br>\n<h2> Succeeded Dataframe consisting of rows that succeeded Validation Rules:</h2>\n<br>\nEMP_CD    |   EMP_NAME  |    DEPT    |  SALARY  |    AGE   |  DATE_OF_JOINING  |  EMAIL              |  validation_result | validation_result_reason<br>\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br>\nE02       |   LISA      |    HR      |  35000   |    35    |  2021-02-30       |  lisa@hrdept.com    |  1                 |<br>\nE06       |   JOE       |    SALES   |  40000   |    31    |  2010-01-01       |  joe@salesdept.com  |  1                 |<br>\n<br>\n<h2> Failed Dataframe consisting of rows that failed Validation Rules:</h2>\n<br>\nEMP_CD    |   EMP_NAME  |    DEPT    |  SALARY  |    AGE   |  DATE_OF_JOINING  |  EMAIL              |  validation_result | validation_result_reason<br>\n-----------------------------------------------------------------------------------------------------------------------------------------------------------<br>\nE01       |   ANTHONY   |    HR      |  50000   |    40    |  2020-12-12       |  anthony@hrdept.com |  0                 | EMP_NAME value length is not less than 5 ,<br>\nE03       |   MARTIN    |    HR      |  20000   |    25    |  2020-01-01       |  martin@nodept.com  |  0                 | AGE is not greater than 30 , EMP_NAME value length is not less than 5 ,<br>\nE04       |   DAVID     |    SALES   |  55000   |    40    |  2021-13-13       |  david@salesdept.com|  0                 | EMP_NAME value length is not less than 5 ,<br>\nE05       |   MARK      |    SALES   |  60000   |    27    |  2020-01-01       |  mark@salesdept.com |  0                 | AGE is not greater than 30 ,<br>\nE07       |   BELLA     |    HR      |  60000   |    24    |  2001-12-12       |  bella@hrdept.com   |  0                 | AGE is not greater than 30 , EMP_NAME value length is not less than 5 ,<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeValidationMultiple",			"x": "506.975px",			"y": "380.975px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "description",					"value": "",					"widget": "textfield",					"title": "Description",					"description": "Validations being Performed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "measureValue",					"value": "80.0",					"widget": "textfield",					"title": "Validation Successful if Percent Good Records >= ",					"description": "Condition for Validation Passing",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputCols",					"value": "[\"EMP_NAME\",\"DEPT\",\"EMAIL\",\"EMP_NAME\"]",					"widget": "variables_list_select",					"title": "Columns",					"description": "Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "functions1",					"value": "[\"IS_NOT_NULL\",\"IS_NOT_NULL\",\"IS_VALID_EMAIL_ADDRESS\",\"LENGTH_GREATER_THAN\"]",					"widget": "variables_list_array",					"title": "Function",					"description": "Validation Function to apply",					"optionsArray": [						"NONE",						"LENGTH_LESS_THAN",						"LENGTH_EQUALS",						"LENGTH_GREATER_THAN",						"VALUE_LESS_THAN",						"VALUE_EQUALS",						"VALUE_GREATER_THAN",						"IS_NULL",						"IS_NOT_NULL",						"IS_VALID_EMAIL_ADDRESS",						"IS_VALID_DATE_FORMAT"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "values1",					"value": "[\"\",\"\",\"\",\"5\"]",					"widget": "variables_list_textfield",					"title": "Values",					"description": "Values",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "conditions1",					"value": "[\"\",\"\",\"\",\"AND\"]",					"widget": "variables_list_array",					"title": "Condition",					"description": "Validation Condition to apply",					"optionsArray": [						"NONE",						"AND",						"OR"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "functions2",					"value": "[\"\",\"\",\"\",\"LENGTH_LESS_THAN\"]",					"widget": "variables_list_array",					"title": "Function",					"description": "Validation Function to apply",					"optionsArray": [						"NONE",						"LENGTH_LESS_THAN",						"LENGTH_EQUALS",						"LENGTH_GREATER_THAN",						"VALUE_LESS_THAN",						"VALUE_EQUALS",						"VALUE_GREATER_THAN",						"IS_NULL",						"IS_NOT_NULL",						"IS_VALID_EMAIL_ADDRESS",						"IS_VALID_DATE_FORMAT"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "values2",					"value": "[\"\",\"\",\"\",\"12\"]",					"widget": "variables_list_textfield",					"title": "Values",					"description": "Values",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "conditions2",					"value": "[\"\",\"\",\"\",\"\"]",					"widget": "variables_list_array",					"title": "Condition",					"description": "Validation Condition to apply",					"optionsArray": [						"NONE",						"AND",						"OR"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "functions3",					"value": "[\"\",\"\",\"\",\"\"]",					"widget": "variables_list_array",					"title": "Function",					"description": "Validation Function to apply",					"optionsArray": [						"NONE",						"LENGTH_LESS_THAN",						"LENGTH_EQUALS",						"LENGTH_GREATER_THAN",						"VALUE_LESS_THAN",						"VALUE_EQUALS",						"VALUE_GREATER_THAN",						"IS_NULL",						"IS_NOT_NULL",						"IS_VALID_EMAIL_ADDRESS",						"IS_VALID_DATE_FORMAT"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "values3",					"value": "[\"\",\"\",\"\",\"\"]",					"widget": "variables_list_textfield",					"title": "Values",					"description": "Values",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "scala"		},		{			"id": "12",			"name": "Validate Fields Advanced Result",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "651.975px",			"y": "381.975px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Dataset containing rows that pass validation rules",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "13",			"name": "Sticky Note",			"description": "Allows capturing Notes on the Workflow",			"details": "",			"examples": "",			"type": "sticky",			"nodeClass": "fire.nodes.doc.NodeStickyNote",			"x": "744px",			"y": "361.987px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bgColor",					"value": "yellow",					"widget": "textfield",					"title": "Bg Color",					"description": "Background of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "width",					"value": "339px",					"widget": "textfield",					"title": "Width",					"description": "Width of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "height",					"value": "125px",					"widget": "textfield",					"title": "Height",					"description": "Height of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "comment",					"value": "<p><span style=\"color: rgb(74, 74, 74);\">Validates incoming dataset based on validation rules defined using validation functions. This node facilitates validation of columns using multiple conditions joined using logical operators like AND / OR</span></p>",					"widget": "textarea_rich",					"title": "Comment",					"description": "Comments for the Workflow",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "14",			"name": "Validate Fields Simple",			"description": "Validation Node",			"details": "This node creates two outgoing Dataframes based on the result of Validation Rules on the incoming Dataframe. <br>\nFirst outgoing Dataframe consists of rows that succeeds the Validation Rules and second one consists of failed rows.   <br>\n<br>\nThis node facilitates checking of one condition in each rule.<br>\n<br>\nMultiple validation rules can be defined for multiple columns. Succeeded and Failed Dataframes are created by applying all the validation rules on the incoming Dataframes.<br>",			"examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD       |    EMP_NAME       |    DEPT       |    SALARY       |    AGE       |    DATE_OF_JOINING       |    EMAIL<br>\n------------------------------------------------------------------------------------------------------------------------------------<br>\nE01          |    ANTHONY        |    HR         |    50000        |    40        |    2020-12-12            |    anthony@hrdept.com<br>\nE02          |    LISA           |    HR         |    35000        |    35        |    2021-02-30            |    lisa@hrdept.com<br>\nE03          |    MARTIN         |    HR         |    20000        |    25        |    2020-01-01            |    martin@nodept.com<br>\nE04          |    DAVID          |    SALES      |    55000        |    40        |    2021-13-13            |    david@salesdept.com<br>\nE05          |    MARK           |    SALES      |    60000        |    27        |    2020-01-01            |    mark@salesdept.com<br>\nE06          |    JOE            |    SALES      |    40000        |    31        |    2010-01-01            |    joe@salesdept.com<br>\nE07          |    BELLA          |    HR         |    60000        |    24        |    2001-12-12            |    bella@hrdept.com<br>\n<br>\nif following Validation Rules are defined in Validation node:<br>\n<br>\nCOLUMNS           |    FUNCTION                 |    VALUES \t<br>\n--------------------------------------------------------------------------<br>\nDATE_OF_JOINING   |    IS_VALID_DATE_FORMAT     |    yyyy-MM-dd<br>\nAGE               |    VALUE_LESS_THAN          |    36<br>\n<br>\nthen outgoing Dataframes would be created as below:<br>\n<br>\n<h2> Succeeded Dataframe consisting of rows that succeeded Validation Rules:</h2>\n<br>\nEMP_CD       |    EMP_NAME       |    DEPT       |    SALARY       |    AGE       |    DATE_OF_JOINING       |    EMAIL<br>\n------------------------------------------------------------------------------------------------------------------------------------<br>\nE03          |    MARTIN         |    HR         |    20000        |    25        |    2020-01-01            |    martin@nodept.com<br>\nE05          |    MARK           |    SALES      |    60000        |    27        |    2020-01-01            |    mark@salesdept.com<br>\nE06          |    JOE            |    SALES      |    40000        |    31        |    2010-01-01            |    joe@salesdept.com<br>\nE07          |    BELLA          |    HR         |    60000        |    24        |    2001-12-12            |    bella@hrdept.com<br>\n<br>\n<h2> Failed Dataframe consisting of rows that failed Validation Rules:</h2>\n<br>\nEMP_CD       |    EMP_NAME       |    DEPT       |    SALARY       |    AGE       |    DATE_OF_JOINING       |    EMAIL<br>\n------------------------------------------------------------------------------------------------------------------------------------<br>\nE01          |    ANTHONY        |    HR         |    50000        |    40        |    2020-12-12            |    anthony@hrdept.com<br>\nE02          |    LISA           |    HR         |    35000        |    35        |    2021-02-30            |    lisa@hrdept.com<br>\nE04          |    DAVID          |    SALES      |    55000        |    40        |    2021-13-13            |    david@salesdept.com<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeValidation",			"x": "139.988px",			"y": "183.988px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "description",					"value": "",					"widget": "textfield",					"title": "Description",					"description": "Validations being Performed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputCols",					"value": "[\"SALARY\"]",					"widget": "variables_list_select",					"title": "Columns",					"description": "Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "functions",					"value": "[\"VALUE_GREATER_THAN\"]",					"widget": "variables_list_array",					"title": "Function",					"description": "Validation Function to apply",					"optionsArray": [						"LENGTH_LESS_THAN",						"LENGTH_EQUALS",						"LENGTH_GREATER_THAN",						"VALUE_LESS_THAN",						"VALUE_EQUALS",						"VALUE_GREATER_THAN",						"IS_NULL",						"IS_NOT_NULL",						"IS_VALID_EMAIL_ADDRESS",						"IS_VALID_DATE_FORMAT"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "values",					"value": "[\"50000\"]",					"widget": "variables_list_textfield",					"title": "Values",					"description": "Values",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "scala"		},		{			"id": "15",			"name": "Validate Fields Simple Result",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "15.9375px",			"y": "183.975px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Dataset containing rows that pass simple validation rule of Salary greater than 50000",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "16",			"name": "Sticky Note",			"description": "Allows capturing Notes on the Workflow",			"details": "",			"examples": "",			"type": "sticky",			"nodeClass": "fire.nodes.doc.NodeStickyNote",			"x": "13px",			"y": "285px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bgColor",					"value": "yellow",					"widget": "textfield",					"title": "Bg Color",					"description": "Background of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "width",					"value": "316px",					"widget": "textfield",					"title": "Width",					"description": "Width of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "height",					"value": "64px",					"widget": "textfield",					"title": "Height",					"description": "Height of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "comment",					"value": "<p><span style=\"color: rgb(74, 74, 74);\">Validates dataset based on validation rules defined using validation functions.</span></p>",					"widget": "textarea_rich",					"title": "Comment",					"description": "Comments for the Workflow",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "17",			"name": "Cast To Different Types-1",			"description": "This node creates a new DataFrame by casting the specified columns into new types",			"details": "This node creates a new DataFrame by casting the specified columns into new types.<br>\n<br>\nOption to replace existing column or create a new column after conversion can be selected in the node.<br>",			"examples": "Incoming Dataframe has following rows:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       <br>\n----------------------------------------------------<br>\nSTRING    |    STRING            |    STRING       <br>\n----------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        <br>\nINV002    |    2020-10-15        |    1500.0        <br>\nINV003    |    2010-01-01        |    100.0         <br>\n<br>\nif MultiCastColumnType node is configured to perform conversions as below:<br>\n<br>\nCOLUMNS    |    NEW DATA TYPE    |    REPLACE EXISTING COLS \t<br>\n--------------------------------------------------------------<br>\nINV_DATE   |    DATE             |    false<br>\nINV_DATE   |    LONG             |    false<br>\n<br>\nthen new columns would be added in outgoing Dataframe as below after conversion:<br>\n<br>\nINV_NO    |    INV_DATE          |    INV_AMT       |    INV_DATE-new  |    INV_AMT-new       <br>\n------------------------------------------------------------------------------------------<br>\nSTRING    |    STRING            |    STRING        |    DATE          |    LONG       <br>\n------------------------------------------------------------------------------------------<br>\nINV001    |    2010-12-28        |    1000.0        |    2010-12-28    |    1000        <br>\nINV002    |    2020-10-15        |    1500.0        |    2020-10-15    |    1500        <br>\nINV003    |    2010-01-01        |    100.0         |    2010-01-01    |    100<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeMultiCastColumnType",			"x": "260.988px",			"y": "183.988px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputColNames",					"value": "[\"SALARY\"]",					"widget": "variables_list_select",					"title": "Columns",					"description": "Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColTypes",					"value": "[\"INTEGER\"]",					"widget": "variables_list_array",					"title": "New Data Type",					"description": "New data type(INTEGER, DOUBLE, STRING, LONG, SHORT)",					"optionsArray": [						"BOOLEAN",						"BYTE",						"DATE",						"DECIMAL",						"DOUBLE",						"FLOAT",						"INTEGER",						"LONG",						"SHORT",						"STRING",						"TIMESTAMP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "replaceExistingCols",					"value": "[\"true\"]",					"widget": "variables_list_array",					"title": "Replace Existing Cols",					"description": "Whether to replace existing Columns or create New Ones",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "scala"		},		{			"id": "18",			"name": "Validate Address",			"description": "This node validate the USA address",			"details": "This node validates an address.<br>\n<br>\nIt creates a new Dataframe by adding a column stating where Address Column contains valid address or not.<br>\n<br>\nSome of the valid address formats are as below:<br>\n<ul>\n<li> 123 xyx avenue</li>\n<li> 1/1 block-D street</li>\n</ul>",			"examples": "Incoming Dataframe has following rows:<br>\n<br>\nCUST_CD    |    Address<br>\n-----------------------------------<br>\nCUST001    |    123 xyx avenue<br>\nCUST002    |    abc 986 street<br>\nCUST003    |    1/1 block-D street<br>\nCUST004    |    123 9876block park<br>\n<br>\nIf ValidateAddress node is configured to validate address mentioned in [Address] column then outgoing Dataframe would be created as below:<br>\n<br>\nCUST_CD    |    Address               |    isValidAddress<br>\n--------------------------------------------------------------<br>\nCUST001    |    123 xyx avenue        |    valid<br>\nCUST002    |    abc 986 street        |    inValid<br>\nCUST003    |    1/1 block-D street    |    valid<br>\nCUST004    |    123 9876block park    |    inValid<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeValidateAddress",			"x": "361.988px",			"y": "422px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputColName",					"value": "ADDRESS",					"widget": "variable",					"title": "Input Column Name",					"description": "input column name",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "scala"		},		{			"id": "19",			"name": "Validate Address Result",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "21.9375px",			"y": "429.975px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Dataset containing address validation flag",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "20",			"name": "Sticky Note",			"description": "Allows capturing Notes on the Workflow",			"details": "",			"examples": "",			"type": "sticky",			"nodeClass": "fire.nodes.doc.NodeStickyNote",			"x": "200px",			"y": "498px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bgColor",					"value": "yellow",					"widget": "textfield",					"title": "Bg Color",					"description": "Background of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "width",					"value": "310px",					"widget": "textfield",					"title": "Width",					"description": "Width of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "height",					"value": "75px",					"widget": "textfield",					"title": "Height",					"description": "Height of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "comment",					"value": "<p>Validates Address data in the incoming dataset</p>",					"widget": "textarea_rich",					"title": "Comment",					"description": "Comments for the Workflow",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		}	],	"edges": [		{			"source": "1",			"target": "3",			"id": 1		},		{			"source": "2",			"target": "3",			"id": 2		},		{			"source": "3",			"target": "4",			"id": 3		},		{			"source": "3",			"target": "5",			"id": 4		},		{			"source": "3",			"target": "6",			"id": 5		},		{			"source": "1",			"target": "8",			"id": 6		},		{			"source": "8",			"target": "9",			"id": 7		},		{			"source": "11",			"target": "12",			"id": 8		},		{			"source": "1",			"target": "11",			"id": 9		},		{			"source": "14",			"target": "15",			"id": 10		},		{			"source": "1",			"target": "17",			"id": 11		},		{			"source": "17",			"target": "14",			"id": 12		},		{			"source": "1",			"target": "18",			"id": 13		},		{			"source": "18",			"target": "19",			"id": 14		}	],	"dataSetDetails": [		{			"id": 672,			"uuid": "a7bb5d77-c172-4cff-bb27-dc0ba1e0039c",			"header": true,			"path": "data/data-validation.csv",			"datasetType": "CSV",			"datasetSchema": "{\"colNames\":[\"EMP_CD\",\"EMP_NAME\",\"DEPT\",\"SALARY\",\"AGE\",\"DATE_OF_JOINING\",\"EMAIL\",\"ADDRESS\"],\"colTypes\":[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\"],\"colFormats\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"colMLTypes\":[\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\"]}"		},		{			"id": 673,			"uuid": "f38859a7-c1d8-4e7a-8b87-c57d4a77df20",			"header": true,			"path": "data/data-validation-compare.csv",			"datasetType": "CSV",			"datasetSchema": "{\"colNames\":[\"EMP_CD\",\"EMP_NAME\",\"DEPT\",\"SALARY\",\"AGE\",\"DATE_OF_JOINING\",\"EMAIL\",\"ADDRESS\"],\"colTypes\":[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\"],\"colFormats\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"colMLTypes\":[\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\"]}"		}	],	"engine": "scala"}