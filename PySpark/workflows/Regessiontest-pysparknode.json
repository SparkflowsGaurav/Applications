{	"name": "Regession test-pyspark node",	"uuid": "d5d68a88-f376-4dec-9a31-61e1b11b6b41",	"category": "Regression",	"nodes": [		{			"id": "1",			"name": "Read Studio Table",			"description": "This node reads a table from Databricks",			"details": "This node reads a table from Databricks.<br>",			"examples": "",			"type": "dataset",			"nodeClass": "fire.nodes.databricks.NodeReadDatabricksTable",			"x": "14.9801px",			"y": "133.986px",			"hint": "Whenever the table is changed, go to Schema tab and Refresh the Schema",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "db",					"value": "test",					"widget": "textfield",					"title": "Databricks Database",					"description": "Databricks Database",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "table",					"value": "sales_records_delta",					"widget": "textfield",					"title": "Databricks Table",					"description": "Databricks Table from which to read the data",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "query",					"value": "",					"widget": "textarea_medium",					"title": "Databricks Query (Optional)",					"description": "If a separate Databricks query needs to be used for reading from the Databricks table. This field is optional.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "schema",					"value": "",					"widget": "tab",					"title": "Schema",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColNames",					"value": "[\"Region\",\"Country\",\"Item_Type\",\"Sales_Channel\",\"Order_Priority\",\"Order_Date\",\"Order_ID\",\"Ship_Date\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"Total_Revenue\",\"Total_Cost\",\"Total_Profit\"]",					"widget": "schema_col_names",					"title": "Column Names of the Table",					"description": "Output Columns Names of the Table",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColTypes",					"value": "[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\",\"STRING\",\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\"]",					"widget": "schema_col_types",					"title": "Column Types of the Table",					"description": "Output Column Types of the Table",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColFormats",					"value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",					"widget": "schema_col_formats",					"title": "Column Formats",					"description": "Output Column Formats",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "3",			"name": "SQL",			"description": "This node runs the given SQL on the incoming DataFrame",			"details": "This node receives an input data frame, creates a temporary table on top of that data frame.<br>\nAllows the user to write a SQL which would be executed on the temporary table.<br>\nThe resulting data frame of running the SQL is passed on to the next node.<br>",			"examples": "<h2>SQL Examples</h2>\n<br>\nBelow are some example of SQL. <br>\n<br>\nThey use the Temp Table Name to be : tempTable<br>\n<br>\nThe schem of the Input Dataframe is : id, price, lotsize, bedrooms, bathrms, stories, driveway, recroom, fullbase, gashw, airco, garagepl, prefarea<br>\n<br>\n<h4> avg price of house</h4>\n<br>\nselect avg(price) as avg_price from tempTable<br>\n<br>\n<br>\n<h4> bedrooms with avg price greater than 10000</h4>\n<br>\nselect bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000<br>\n<br>\n<br>\n<h4> house details with bedrooms avg price greater than 10000</h4>\n<br>\nselect tempTable.* , inner_table.avg_price from<br>\n(select bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000) as inner_table<br>\nJOIN tempTable ON(inner_table.bedrooms = tempTable.bedrooms)<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeSQL",			"x": "21.9261px",			"y": "23.9432px",			"hint": "Whenever the table is changed, go to Schema tab and Refresh the Schema",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "tempTable",					"value": "fire_temp_table",					"widget": "textfield",					"title": "Temp Table",					"description": "Temp Table Name to be used",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "sql",					"value": "SELECT Order_ID, Ship_Date, Units_Sold, Unit_Price, Unit_Cost FROM fire_temp_table",					"widget": "textarea_large",					"type": "sql",					"title": "SQL",					"description": "SQL to be run",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "schema",					"value": "",					"widget": "tab",					"title": "Schema",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColNames",					"value": "[\"Order_ID\",\"Ship_Date\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\"]",					"widget": "schema_col_names",					"title": "Output Column Names",					"description": "Name of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColTypes",					"value": "[\"INTEGER\",\"STRING\",\"INTEGER\",\"DOUBLE\",\"DOUBLE\"]",					"widget": "schema_col_types",					"title": "Output Column Types",					"description": "Data Type of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColFormats",					"value": "[\"\",\"\",\"\",\"\",\"\"]",					"widget": "schema_col_formats",					"title": "Output Column Formats",					"description": "Format of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "4",			"name": "SQL",			"description": "This node runs the given SQL on the incoming DataFrame",			"details": "This node receives an input data frame, creates a temporary table on top of that data frame.<br>\nAllows the user to write a SQL which would be executed on the temporary table.<br>\nThe resulting data frame of running the SQL is passed on to the next node.<br>",			"examples": "<h2>SQL Examples</h2>\n<br>\nBelow are some example of SQL. <br>\n<br>\nThey use the Temp Table Name to be : tempTable<br>\n<br>\nThe schem of the Input Dataframe is : id, price, lotsize, bedrooms, bathrms, stories, driveway, recroom, fullbase, gashw, airco, garagepl, prefarea<br>\n<br>\n<h4> avg price of house</h4>\n<br>\nselect avg(price) as avg_price from tempTable<br>\n<br>\n<br>\n<h4> bedrooms with avg price greater than 10000</h4>\n<br>\nselect bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000<br>\n<br>\n<br>\n<h4> house details with bedrooms avg price greater than 10000</h4>\n<br>\nselect tempTable.* , inner_table.avg_price from<br>\n(select bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000) as inner_table<br>\nJOIN tempTable ON(inner_table.bedrooms = tempTable.bedrooms)<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeSQL",			"x": "138.943px",			"y": "127.952px",			"hint": "Whenever the table is changed, go to Schema tab and Refresh the Schema",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "tempTable",					"value": "fire_temp_table",					"widget": "textfield",					"title": "Temp Table",					"description": "Temp Table Name to be used",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "sql",					"value": "SELECT Order_ID, Item_Type, Total_Revenue, Total_Cost, Total_Profit FROM fire_temp_table",					"widget": "textarea_large",					"type": "sql",					"title": "SQL",					"description": "SQL to be run",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "schema",					"value": "",					"widget": "tab",					"title": "Schema",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColNames",					"value": "[\"Order_ID\",\"Item_Type\",\"Total_Revenue\",\"Total_Cost\",\"Total_Profit\"]",					"widget": "schema_col_names",					"title": "Output Column Names",					"description": "Name of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColTypes",					"value": "[\"INTEGER\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\"]",					"widget": "schema_col_types",					"title": "Output Column Types",					"description": "Data Type of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColFormats",					"value": "[\"\",\"\",\"\",\"\",\"\"]",					"widget": "schema_col_formats",					"title": "Output Column Formats",					"description": "Format of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "5",			"name": "Date Time Field Extract",			"description": "It creates a new DataFrame by extracting Date and Time fields.",			"details": "It creates a new DataFrame by extracting Date and Time fields.<br>\n<br>\nThe output DataFrame has year/month/dayofmonth/hour/minute/second values extracted from the specified TimeStamp column into new columns<br>",			"examples": "If incoming Dataframe has Date value as 2018-01-01 14:30:45 in YYYY-MM-DD HH:mm:ss format then using datetimeextract node would result in followings <br>\nadded as new columns to the Dataframe:<br>\n<br>\n<ul>\n<li> YEAR : 2018 </li>\n<li> MONTH : 01</li>\n<li> DAY OF MONTH : 01 </li>\n<li> HOUR : 14</li>\n<li> MINUTE : 30</li>\n<li> SECOND : 45</li>\n<li> WEEKOFYEAR : 1</li>\n</ul>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeDateTimeFieldExtract",			"x": "303.957px",			"y": "3.96875px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputCol",					"value": "shipdate",					"widget": "variable",					"title": "Column",					"description": "The input column name",					"datatypes": [						"date",						"timestamp"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "extractYear",					"value": "true",					"widget": "array",					"title": "Extract Year",					"description": "Extract Year",					"datatypes": [						"boolean"					],					"optionsArray": [						"true",						"false"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "extractMonth",					"value": "true",					"widget": "array",					"title": "Extract Month",					"description": "Extract Month",					"datatypes": [						"boolean"					],					"optionsArray": [						"true",						"false"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "extractDayOfMonth",					"value": "true",					"widget": "array",					"title": "Extract Day of Month",					"description": "Extract Day of Month",					"datatypes": [						"boolean"					],					"optionsArray": [						"true",						"false"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "extractHour",					"value": "false",					"widget": "array",					"title": "Extract Hour",					"description": "Extract Hour",					"datatypes": [						"boolean"					],					"optionsArray": [						"true",						"false"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "extractMinute",					"value": "false",					"widget": "array",					"title": "Extract Minute",					"description": "Extract Minute",					"datatypes": [						"boolean"					],					"optionsArray": [						"true",						"false"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "extractSecond",					"value": "false",					"widget": "array",					"title": "Extract Second",					"description": "Extract Second",					"datatypes": [						"boolean"					],					"optionsArray": [						"true",						"false"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "extractWeekOfYear",					"value": "true",					"widget": "array",					"title": "Extract WeekOfYear",					"description": "Extract WeekOfYear",					"datatypes": [						"boolean"					],					"optionsArray": [						"true",						"false"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "6",			"name": "String To Date",			"description": "This node converts string columns to date using the specified date/time format",			"details": "This node converts multiple string columns to date/time.<br>",			"examples": "<h2>Format Examples</h2>\n<br>\n<ul>\n<li> dd-MM-yy : 31-01-12</li>\n<li> dd-MM-yyyy : 31-01-2012</li>\n<li> MM-dd-yyyy : 01-31-2012</li>\n<li> yyyy-MM-dd : 2012-01-31</li>\n<li> yyyy-MM-dd HH:mm:ss : 2012-01-31 23:59:59</li>\n<li> yyyy-MM-dd HH:mm:ss.SSS : 2012-01-31 23:59:59.999</li>\n<li> yyyy-MM-dd HH:mm:ss.SSSZ : 2012-01-31 23:59:59.999+0100</li>\n<li> EEEEE MMMMM yyyy HH:mm:ss.SSSZ : Saturday November 2012 10:45:42.720+0100</li>\n</ul>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeMultiStringToDate",			"x": "174.967px",			"y": "12.9801px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputColNames",					"value": "[\"Ship_Date\"]",					"widget": "variables_list_select",					"title": "Columns",					"description": "Columns",					"datatypes": [						"string"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputColFormats",					"value": "[\"mm/dd/yyyy\"]",					"widget": "variables_list_textfield",					"title": "Input Column Formats",					"description": "Input Column Formats. eg: yyyy-MM-dd yyyy-MM-dd HH:mm:ss",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColNames",					"value": "[\"shipdate\"]",					"widget": "variables_list_textfield",					"title": "Output Column Names",					"description": "Output Column Names",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColTypes",					"value": "[\"DATE\"]",					"widget": "variables_list_array",					"title": "New Data Types",					"description": "New data types (DATE, TIMESTAMP)",					"optionsArray": [						"DATE",						"TIMESTAMP"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "7",			"name": "Join On Common Column",			"description": "This node joins the incoming dataframes using one common column between them.",			"details": "This node joins the incoming dataframes using one common column between the two dataframes. <br>\n<br>\nSelect the Common Join Column to be used in the Join.<br>",			"examples": "",			"type": "join",			"nodeClass": "fire.nodes.etl.NodeJoinUsingColumn",			"x": "307.947px",			"y": "129.952px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "joinCol",					"value": "Order_ID",					"widget": "variable_common",					"title": "Common Join Column",					"description": "column on which to join",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "joinType",					"value": "inner",					"widget": "array",					"title": "JoinType",					"description": "type of join",					"optionsArray": [						"inner",						"outer",						"leftouter",						"rightouter",						"leftsemi",						"leftanti"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "schema",					"value": "",					"widget": "tab",					"title": "Schema",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColNames",					"value": "[\"Order_ID\",\"Ship_Date\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Item_Type\",\"Total_Revenue\",\"Total_Cost\",\"Total_Profit\"]",					"widget": "schema_col_names",					"title": "Output Column Names",					"description": "Name of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColTypes",					"value": "[\"INTEGER\",\"STRING\",\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"DATE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\"]",					"widget": "schema_col_types",					"title": "Output Column Types",					"description": "Data Type of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "outputColFormats",					"value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",					"widget": "schema_col_formats",					"title": "Output Column Formats",					"description": "Format of the Output Columns",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "8",			"name": "Drop Columns",			"description": "This node creates a new DataFrame by dropping the specified columns",			"details": "This node creates a new DataFrame by deleting columns specified as an input.<br>\n<br>\nThe specified columns are dropped from the incoming DataFrame to generate the output DataFrame.<br>",			"examples": "If incoming Dataframe has following columns<br>\n<br>\n<ul>\n<li> CUST_CD</li>\n<li> CUST_NAME</li>\n<li> DOB</li>\n<li> ADDRESS</li>\n</ul>\nand [DOB] and [ADDRESS] need to be dropped from outgoing Dataframe then add following to the Drop list in the Drop Column node:<br>\n<br>\n<ul>\n<li> DOB</li>\n<li> ADDRESS</li>\n</ul>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeDropColumns",			"x": "540.956px",			"y": "129.956px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "dropCols",					"value": "[\"Ship_Date\",\"Item_Type\"]",					"widget": "variables",					"title": "Columns",					"description": "The columns to be excluded from the output DataFrame",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "9",			"name": "Filter By Date Range",			"description": "This node filters Rows within the given date range",			"details": "This node filters Rows within the given date range.<br>\n<br>\nNew outgoing Dataframe is created based on filtered rows and it is passed to next node.<br>",			"examples": "Incoming Dataframe has following rows:<br>\n<br>\nCUST_CD    |    INV_NO    |    INV_DT      |    PRD_CD<br>\n----------------------------------------------------------<br>\nC01        |    INV1111   |    2021-10-01  |    PRD01<br>\nC01        |    INV1112   |    2021-10-03  |    PRD02<br>\nC01        |    INV1113   |    2021-10-05  |    PRD03<br>\nC01        |    INV1114   |    2021-10-07  |    PRD04<br>\nC01        |    INV1115   |    2021-10-09  |    PRD05<br>\nC01        |    INV1116   |    2021-10-10  |    PRD06<br>\n<br>\nIf FilterByDateRange node is configured as below:<br>\n<br>\nCOLUMN       :    INV_DT_VAL<br>\nFROM DATE    :    2021-10-01<br>\nTO DATE      :    2021-10-05<br>\n<br>\nthen outgoing Dataframe would be created as below with the rows falling in the given date range:<br>\n<br>\nCUST_CD    |    INV_NO    |    INV_DT      |    PRD_CD<br>\n----------------------------------------------------------<br>\nC01        |    INV1111   |    2021-10-01  |    PRD01<br>\nC01        |    INV1112   |    2021-10-03  |    PRD02<br>\nC01        |    INV1113   |    2021-10-05  |    PRD03<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeFilterByDateRange",			"x": "515.955px",			"y": "6.9588px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputCol",					"value": "shipdate",					"widget": "variable",					"title": "Column",					"description": "input column name",					"datatypes": [						"date"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "fromDateCol",					"value": "2012-01-01",					"widget": "datefield",					"title": "From Date",					"description": "Takes Start Date in the form of yyyy-MM-dd",					"datatypes": [						"date"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "toDateCol",					"value": "2017-03-10",					"widget": "datefield",					"title": "To Date",					"description": "Takes End Date in the form of yyyy-MM-dd",					"datatypes": [						"date"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "10",			"name": "Filter By Number Range",			"description": "This node filters the rows in the given Number Range",			"details": "This node filters Rows in the given Number Range.<br>\n<br>\nNew outgoing Dataframe is created based on filtered rows and it is passed to next node.<br>",			"examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT    |    SALARY    |    AGE    <br>\n------------------------------------------------------------------------<br>\nE01       |    ANTHONY     |    HR      |    50000     |    40<br>\nE02       |    LISA        |    HR      |    50000     |    35<br>\nE03       |    MARTIN      |    HR      |    20000     |    25<br>\nE04       |    DAVID       |    SALES   |    55000     |    40<br>\nE05       |    MARK        |    SALES   |    60000     |    45<br>\nE06       |    JOE         |    SALES   |    40000     |    25<br>\nE07       |    BELLA       |    HR      |    60000     |    24<br>\n<br>\nIf FilterByNumberRange node is configured as below:<br>\n<br>\nINPUT COLUMN NAME    :    AGE<br>\nLOWEST VALUE         :    35<br>\nHIGHEST VALUE        :    45<br>\n<br>\nthen outgoing Dataframe would be created as below with rows falling in the given number range:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT    |    SALARY    |    AGE    <br>\n------------------------------------------------------------------------<br>\nE01       |    ANTHONY     |    HR      |    50000     |    40<br>\nE02       |    LISA        |    HR      |    50000     |    35<br>\nE04       |    DAVID       |    SALES   |    55000     |    40<br>\nE05       |    MARK        |    SALES   |    60000     |    45<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeFilterByNumberRange",			"x": "646.963px",			"y": "9.97159px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputCol",					"value": "Unit_Price",					"widget": "variable",					"title": "Input Column Name",					"description": "input column name",					"datatypes": [						"int",						"double",						"float",						"long",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "lowestValue",					"value": "5",					"widget": "textfield",					"title": "Lowest Value",					"description": "input lowest value",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "highestValue",					"value": "1000",					"widget": "textfield",					"title": "Highest Value",					"description": "input highest value",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "11",			"name": "Row Filter",			"description": "This node creates a new DataFrame containing the rows that satisfy the given condition",			"details": "This node creates a new DataFrame containing only rows satisfying the given condition.<br>",			"examples": "<h2>Examples of Conditional Expression</h2>\n<br>\nBelow are some examples of the Conditions Expression which can be used.<br>\n<br>\n<ul>\n<li> col1 > 5 AND col2 > 3</li>\n</ul>\n<ul>\n<li> name is not NULL</li>\n</ul>\n<ul>\n<li> name is NULL</li>\n</ul>\n<ul>\n<li> usd_pledged_real > 0 and (category = \"Narrative Film\" or category == \"Music\") and goal > 100</li>\n</ul>\n<ul>\n<li> dt > '2021-09-03'  (dt column is of type date)</li>\n</ul>\n<ul>\n<li> datetime > '2011-01-01 00:00:00.0'     (datetime column is of type timestamp)</li>\n</ul>\n<ul>\n<li> datetime > '2011-01-01 00:00:00.0' and datetime < '2016-01-01 00:00:00.0'</li>\n</ul>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeRowFilter",			"x": "659.922px",			"y": "135.935px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "conditionExpr",					"value": "Unit_Price > 50",					"widget": "textarea_small",					"title": "Conditional Expression",					"description": "The filtering condition. Rows not satisfying given condition will be excluded from output DataFrame. eg: usd_pledged_real > 0 and (category = 1 or category == 2) and goal > 100",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "12",			"name": "Distinct Values In Column",			"description": "",			"details": "This node displays distinct combination of values in the selected columns. <br>\n<br>\nIf only one column is selected then it displays Distinct values present in that column. <br>\nIf more than one column is selected then it displays distinct combination of values present in the selected columns.<br>",			"examples": "If DistinctValuesInColumn node is configured to display distinct values in [Location] and [Dept] columns from incoming dataset<br>\nthen outgoing Dataframe would be created in tabular format displaying unique combination of data between the selected columns.<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeDistinctValues",			"x": "759.923px",			"y": "10.9205px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "distinctCols",					"value": "[\"shipdate_month\"]",					"widget": "variables",					"title": "Column Names",					"description": "Name of columns to get the distinct combination of values.",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "13",			"name": "Flag Outlier",			"description": "Flag the outlier based on the selected column using Box-and-Whisker technique.",			"details": "This node identifies whether a data point is outlier in a series or not based on the lower and upper quantile set. <br>\n<br>\nIt can be checked against numeric columns only.<br>",			"examples": "FlagOutlier node can be configured as below:<br>\n<br>\nINPUT COLUMN TO FLAG THE OUTLIER\t:\tSALARY<br>\nLOWERQUANTILE\t\t\t\t\t\t          :\t0.25<br>\nUPPERQUANTILE\t\t\t\t\t\t          :\t0.75<br>\n<br>\nNew column [is_SALARY_outlier] would be added to the output specifing whether a data point is outlier or not.<br>",			"type": "transform",			"nodeClass": "fire.nodes.ml.NodeFlagOutlier",			"x": "632.919px",			"y": "261.912px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Input Column to flag the outlier",					"description": "The Input Column to flag the outlier",					"datatypes": [						"double",						"integer",						"float"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "lowerQuantile",					"value": "0.15",					"widget": "textfield",					"title": "LowerQuantile",					"description": "",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "upperQuantile",					"value": "0.85",					"widget": "textfield",					"title": "UpperQuantile",					"description": "",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "16",			"name": "Print N Rows",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "This node is used to print incoming dataset.<br>\n<br>\nNumber of rows that needs to be printed can be configured in the node.<br>",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "850.957px",			"y": "7.99432px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Row Values",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "17",			"name": "Split",			"description": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data. For example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).",			"details": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data.<br>\n<br>\nFor example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).<br>\n<br>\nThe split node can be used for splitting the DataFrame for training and test datasets used in Machine Learning.<br>",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.ml.NodeSplit",			"x": "450.919px",			"y": "212.912px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "fraction1",					"value": ".8",					"widget": "textfield",					"title": "Fraction 1",					"description": "Fraction to be used for Splitting the DataFrame into two. The first DataFrame would go to the lower edge output. The other would go to the higher edge output.",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "18",			"name": "Sklearn Bayesian Ridge Regression",			"description": "Bayesian regression allows a natural mechanism to survive insufficient data or poorly distributed data by formulating linear regression using probability distributors rather than point estimates. The output or response ‘y’ is assumed to drawn from a probability distribution rather than estimated as a single value.",			"details": "More details are available at : <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.BayesianRidge.html\" target=\"_blank\">scikit-learn.org/stable/modules/generated/sklearn.linear_model.BayesianRidge.html</a><br>",			"examples": "",			"type": "ml-estimator",			"nodeClass": "fire.nodes.sklearn.NodeSklearnBayesianRidgeRegression",			"x": "227.929px",			"y": "209.926px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Target Column",					"description": "The label column for model fitting",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "featureCols",					"value": "[\"Order_ID\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Total_Revenue\",\"Total_Cost\"]",					"widget": "variables",					"title": "Feature Columns",					"description": "Feature columns of type - all numeric, boolean and vector",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "niter",					"value": "300",					"widget": "textfield",					"title": "N Iter",					"description": "Maximum number of iterations. Should be greater than or equal to 1.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "alpha1",					"value": "1.e-6",					"widget": "textfield",					"title": "Alpha1",					"description": "Hyper-parameter : shape parameter for the Gamma distribution prior over the alpha parameter.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "alpha2",					"value": "1.e-6",					"widget": "textfield",					"title": "Alpha2",					"description": "Hyper-parameter : inverse scale parameter (rate parameter) for the Gamma distribution prior over the alpha parameter.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "lambda1",					"value": "1.e-6",					"widget": "textfield",					"title": "Lambda1",					"description": "Hyper-parameter : shape parameter for the Gamma distribution prior over the lambda parameter.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "lambda2",					"value": "1.e-6",					"widget": "textfield",					"title": "Lambda2",					"description": "Hyper-parameter : inverse scale parameter (rate parameter) for the Gamma distribution prior over the lambda parameter.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "tol",					"value": "1.e-3",					"widget": "textfield",					"title": "Tol",					"description": " Stop the algorithm if w has converged",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "fitintercept",					"value": "true",					"widget": "array",					"title": "Fitintercept",					"description": "Whether to calculate the intercept for this model. The intercept is not treated as a probabilistic parameter and thus has no associated variance. If set to False, no intercept will be used in calculations",					"optionsArray": [						"false",						"true"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "normalize",					"value": "false",					"widget": "array",					"title": "Normalize",					"description": "This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm.",					"optionsArray": [						"false",						"true"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "compute_score",					"value": "true",					"widget": "array",					"title": "Compute Score",					"description": "If True, compute the log marginal likelihood at each iteration of the optimization.",					"optionsArray": [						"false",						"true"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "19",			"name": "Sklearn Gradient Boosting Regression",			"description": "Gradient Boosting Regression, builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. In each stage a regression tree is fit on the negative gradient of the given loss function.",			"details": "More details are available at : <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html\" target=\"_blank\">scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html</a><br>",			"examples": "",			"type": "ml-estimator",			"nodeClass": "fire.nodes.sklearn.NodeSklearnGradientBoostingRegressor",			"x": "699.908px",			"y": "473.922px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Target Column",					"description": "The label column for model fitting",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "featureCols",					"value": "[\"Order_ID\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Total_Revenue\",\"Total_Cost\"]",					"widget": "variables",					"title": "Feature Columns",					"description": "Feature columns of type - all numeric, boolean and vector",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "loss",					"value": "ls",					"widget": "array",					"title": "Loss",					"description": "",					"optionsArray": [						"ls",						"lad",						"huber",						"quantile"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "learning_rate",					"value": "1.0",					"widget": "textfield",					"title": "LearningRate",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n_estimators",					"value": "100",					"widget": "textfield",					"title": "NEstimators",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "subsample",					"value": "1.0",					"widget": "textfield",					"title": "Subsample",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "criterion",					"value": "friedman_mse",					"widget": "array",					"title": "Criterion",					"description": "",					"optionsArray": [						"friedman_mse",						"mse",						"mae"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_samples_split",					"value": "2",					"widget": "textfield",					"title": "MinSamplesSplit",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_samples_leaf",					"value": "1",					"widget": "textfield",					"title": "MinSamplesLeaf",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_weight_fraction_leaf",					"value": "0.0",					"widget": "textfield",					"title": "MinWeightFractionLeaf",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "max_depth",					"value": "3",					"widget": "textfield",					"title": "MaxDepth",					"description": "Default value is None",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_impurity_decrease",					"value": "0",					"widget": "textfield",					"title": "MinImpurityDecrease",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_impurity_split",					"value": "-1",					"widget": "textfield",					"title": "MinImpuritySplit",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "random_state",					"value": "-1",					"widget": "textfield",					"title": "RandomState",					"description": "Default value is None",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "alpha",					"value": "0.9",					"widget": "textfield",					"title": "Alpha",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "verbose",					"value": "0",					"widget": "textfield",					"title": "Verbose",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "max_leaf_nodes",					"value": "-1",					"widget": "textfield",					"title": "MaxLeafNodes",					"description": "Default value is None ",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "warm_start",					"value": "false",					"widget": "array",					"title": "WarmStart",					"description": "",					"optionsArray": [						"True",						"False"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "presort",					"value": "auto",					"widget": "textfield",					"title": "Presort",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "validation_fraction",					"value": "0.1",					"widget": "textfield",					"title": "ValidationFraction",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n_iter_no_change",					"value": "-1",					"widget": "textfield",					"title": "NIterNoChange",					"description": "Default value is None",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "tol",					"value": "0.0001",					"widget": "textfield",					"title": "Tol",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "21",			"name": "Sklearn Random Forest Regression",			"description": "Random Forest Regression, fits a number of classifying decision trees on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The sub-sample size is controlled with the max_samples parameter if bootstrap=True (default), otherwise the whole dataset is used to build each tree.",			"details": "More details are available at : <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html\" target=\"_blank\">scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html</a><br>",			"examples": "",			"type": "ml-estimator",			"nodeClass": "fire.nodes.sklearn.NodeSklearnRandomForestRegression",			"x": "397.925px",			"y": "293.936px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Target Column",					"description": "The label column for model fitting",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "featureCols",					"value": "[\"Order_ID\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Total_Revenue\",\"Total_Cost\"]",					"widget": "variables",					"title": "Feature Columns",					"description": "Feature columns of type - all numeric, boolean and vector",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n_estimators",					"value": "10",					"widget": "textfield",					"title": "NEstimators",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "criterion",					"value": "mse",					"widget": "array",					"title": "Criterion",					"description": "",					"optionsArray": [						"mse",						"mae"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "max_depth",					"value": "-1",					"widget": "textfield",					"title": "MaxDepth",					"description": "Default value is None",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_samples_split",					"value": "2",					"widget": "textfield",					"title": "MinSamplesSplit",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_samples_leaf",					"value": "1",					"widget": "textfield",					"title": "MinSamplesLeaf",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_weight_fraction_leaf",					"value": "0.0",					"widget": "textfield",					"title": "MinWeightFractionLeaf",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "max_features",					"value": "auto",					"widget": "array",					"title": "MaxFeatures",					"description": "",					"optionsArray": [						"auto",						"sqrt",						"log2",						"None"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "max_leaf_nodes",					"value": "-1",					"widget": "textfield",					"title": "MaxLeafNodes",					"description": "Default value is None",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_impurity_decrease",					"value": "0",					"widget": "textfield",					"title": "MinImpurityDecrease",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "min_impurity_split",					"value": "1e-7",					"widget": "textfield",					"title": "MinImpuritySplit",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bootstrap",					"value": "True",					"widget": "array",					"title": "Bootstrap",					"description": "",					"optionsArray": [						"True",						"False"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "oob_score",					"value": "False",					"widget": "array",					"title": "OobScore",					"description": "",					"optionsArray": [						"True",						"False"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "random_state",					"value": "-1",					"widget": "textfield",					"title": "RandomState",					"description": "Default value is None",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "warm_start",					"value": "False",					"widget": "array",					"title": "WarmStart",					"description": "",					"optionsArray": [						"True",						"False"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "24",			"name": "Sklearn Predict",			"description": "Predict node takes in a dataframe and model and makes predictions",			"details": "",			"examples": "",			"type": "ml-predict",			"nodeClass": "fire.nodes.sklearn.NodeSklearnPredict",			"x": "275.95px",			"y": "305.959px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "featureCols",					"value": "[\"Order_ID\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Total_Revenue\",\"Total_Cost\"]",					"widget": "variables",					"title": "Feature Columns",					"description": "Feature columns of type - all numeric, boolean and vector",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Target Column",					"description": "The label column for model fitting",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "keyCol",					"value": "",					"widget": "variable",					"title": "Key Column",					"description": "The key column to identify the each row/data/sample.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "26",			"name": "Sklearn Predict",			"description": "Predict node takes in a dataframe and model and makes predictions",			"details": "",			"examples": "",			"type": "ml-predict",			"nodeClass": "fire.nodes.sklearn.NodeSklearnPredict",			"x": "821.926px",			"y": "477.911px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "featureCols",					"value": "[\"Order_ID\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Total_Revenue\",\"Total_Cost\"]",					"widget": "variables",					"title": "Feature Columns",					"description": "Feature columns of type - all numeric, boolean and vector",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Target Column",					"description": "The label column for model fitting",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "keyCol",					"value": "",					"widget": "variable",					"title": "Key Column",					"description": "The key column to identify the each row/data/sample.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "28",			"name": "Sklearn Predict",			"description": "Predict node takes in a dataframe and model and makes predictions",			"details": "",			"examples": "",			"type": "ml-predict",			"nodeClass": "fire.nodes.sklearn.NodeSklearnPredict",			"x": "467.946px",			"y": "402.953px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "featureCols",					"value": "[\"Order_ID\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Total_Revenue\",\"Total_Cost\"]",					"widget": "variables",					"title": "Feature Columns",					"description": "Feature columns of type - all numeric, boolean and vector",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Target Column",					"description": "The label column for model fitting",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "keyCol",					"value": "",					"widget": "variable",					"title": "Key Column",					"description": "The key column to identify the each row/data/sample.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "29",			"name": "Split",			"description": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data. For example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).",			"details": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data.<br>\n<br>\nFor example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).<br>\n<br>\nThe split node can be used for splitting the DataFrame for training and test datasets used in Machine Learning.<br>",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.ml.NodeSplit",			"x": "664.98px",			"y": "374.982px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "fraction1",					"value": ".8",					"widget": "textfield",					"title": "Fraction 1",					"description": "Fraction to be used for Splitting the DataFrame into two. The first DataFrame would go to the lower edge output. The other would go to the higher edge output.",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "30",			"name": "SkLearn Ridge Regression",			"description": "Ridge Regression, solves a regression model where the loss function is the linear least squares function and regularization is given by the l2-norm.",			"details": "More details are available at : <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html\" target=\"_blank\">scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html</a><br>",			"examples": "",			"type": "ml-estimator",			"nodeClass": "fire.nodes.sklearn.NodeSklearnRidgeRegression",			"x": "559.972px",			"y": "372.976px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Target Column",					"description": "The label column for model fitting",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "featureCols",					"value": "[\"Order_ID\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Total_Revenue\",\"Total_Cost\"]",					"widget": "variables",					"title": "Feature Columns",					"description": "Feature columns of type - all numeric, boolean and vector",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "alpha",					"value": "1.0",					"widget": "textfield",					"title": "Alpha",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "fitintercept",					"value": "true",					"widget": "array",					"title": "Fitintercept",					"description": "",					"datatypes": [						"boolean"					],					"optionsArray": [						"false",						"true"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "normalize",					"value": "false",					"widget": "array",					"title": "Normalize",					"description": "",					"datatypes": [						"boolean"					],					"optionsArray": [						"false",						"true"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "maxiter",					"value": "2",					"widget": "textfield",					"title": "Maxiter",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "tol",					"value": "1e-3",					"widget": "textfield",					"title": "Tolerence",					"description": "",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "solver",					"value": "auto",					"widget": "array",					"title": "Solver",					"description": "",					"optionsArray": [						"auto",						"svd",						"cholesky",						"lsqr",						"sparse_cg",						"sag",						"saga"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "randomstate",					"value": "-1",					"widget": "textfield",					"title": "randomstate",					"description": "Random state",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "31",			"name": "Sklearn Predict",			"description": "Predict node takes in a dataframe and model and makes predictions",			"details": "",			"examples": "",			"type": "ml-predict",			"nodeClass": "fire.nodes.sklearn.NodeSklearnPredict",			"x": "619.982px",			"y": "514.984px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "featureCols",					"value": "[\"Order_ID\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"shipdate_year\",\"shipdate_month\",\"shipdate_dayofmonth\",\"shipdate_weekofyear\",\"Total_Revenue\",\"Total_Cost\"]",					"widget": "variables",					"title": "Feature Columns",					"description": "Feature columns of type - all numeric, boolean and vector",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Target Column",					"description": "The label column for model fitting",					"datatypes": [						"integer",						"long",						"double",						"float",						"int"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "keyCol",					"value": "",					"widget": "variable",					"title": "Key Column",					"description": "The key column to identify the each row/data/sample.",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "32",			"name": "Sklearn Regression Evaluator",			"description": "Evaluator for regression, which expects two input columns: prediction and label.",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.sklearn.NodeSklearnRegressionEvaluator",			"x": "122.987px",			"y": "298.986px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Label Column",					"description": "The label column for model fitting.",					"datatypes": [						"double",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "predictCol",					"value": "predict",					"widget": "variable",					"title": "Prediction Column",					"description": "The prediction column.",					"datatypes": [						"double",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "33",			"name": "Sklearn Regression Evaluator",			"description": "Evaluator for regression, which expects two input columns: prediction and label.",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.sklearn.NodeSklearnRegressionEvaluator",			"x": "316.967px",			"y": "391.972px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Label Column",					"description": "The label column for model fitting.",					"datatypes": [						"double",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "predictCol",					"value": "predict",					"widget": "variable",					"title": "Prediction Column",					"description": "The prediction column.",					"datatypes": [						"double",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "34",			"name": "Sklearn Regression Evaluator",			"description": "Evaluator for regression, which expects two input columns: prediction and label.",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.sklearn.NodeSklearnRegressionEvaluator",			"x": "480.953px",			"y": "545.957px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Label Column",					"description": "The label column for model fitting.",					"datatypes": [						"double",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "predictCol",					"value": "predict",					"widget": "variable",					"title": "Prediction Column",					"description": "The prediction column.",					"datatypes": [						"double",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "35",			"name": "Sklearn Regression Evaluator",			"description": "Evaluator for regression, which expects two input columns: prediction and label.",			"details": "",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.sklearn.NodeSklearnRegressionEvaluator",			"x": "761.971px",			"y": "537.976px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "targetCol",					"value": "Total_Profit",					"widget": "variable",					"title": "Label Column",					"description": "The label column for model fitting.",					"datatypes": [						"double",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "predictCol",					"value": "predict",					"widget": "variable",					"title": "Prediction Column",					"description": "The prediction column.",					"datatypes": [						"double",						"integer"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "pyspark"		},		{			"id": "36",			"name": "Split",			"description": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data. For example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).",			"details": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data.<br>\n<br>\nFor example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).<br>\n<br>\nThe split node can be used for splitting the DataFrame for training and test datasets used in Machine Learning.<br>",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.ml.NodeSplit",			"x": "517.91px",			"y": "291.901px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "fraction1",					"value": ".8",					"widget": "textfield",					"title": "Fraction 1",					"description": "Fraction to be used for Splitting the DataFrame into two. The first DataFrame would go to the lower edge output. The other would go to the higher edge output.",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "37",			"name": "Split",			"description": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data. For example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).",			"details": "This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data.<br>\n<br>\nFor example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows(passed from lower edge id to next node) and the other containing the remaining 30%(passed from higher edge id to next node).<br>\n<br>\nThe split node can be used for splitting the DataFrame for training and test datasets used in Machine Learning.<br>",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.ml.NodeSplit",			"x": "745.956px",			"y": "364.955px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "fraction1",					"value": ".8",					"widget": "textfield",					"title": "Fraction 1",					"description": "Fraction to be used for Splitting the DataFrame into two. The first DataFrame would go to the lower edge output. The other would go to the higher edge output.",					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "38",			"name": "Sticky Note",			"description": "Allows capturing Notes on the Workflow",			"details": "",			"examples": "",			"type": "sticky",			"nodeClass": "fire.nodes.doc.NodeStickyNote",			"x": "370.994px",			"y": "70.9943px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bgColor",					"value": "blue",					"widget": "textfield",					"title": "Bg Color",					"description": "Background of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "width",					"value": "146.011364px",					"widget": "textfield",					"title": "Width",					"description": "Width of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "height",					"value": "55.011364px",					"widget": "textfield",					"title": "Height",					"description": "Height of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "comment",					"value": "<p><strong>Data Cleaning </strong></p>",					"widget": "textarea_rich",					"title": "Comment",					"description": "Comments for the Workflow",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "39",			"name": "Sticky Note",			"description": "Allows capturing Notes on the Workflow",			"details": "",			"examples": "",			"type": "sticky",			"nodeClass": "fire.nodes.doc.NodeStickyNote",			"x": "374.972px",			"y": "471.969px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bgColor",					"value": "blue",					"widget": "textfield",					"title": "Bg Color",					"description": "Background of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "width",					"value": "184.011364px",					"widget": "textfield",					"title": "Width",					"description": "Width of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "height",					"value": "63.011364px",					"widget": "textfield",					"title": "Height",					"description": "Height of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "comment",					"value": "<p><strong>Regression modeling and evaluation</strong></p>",					"widget": "textarea_rich",					"title": "Comment",					"description": "Comments for the Workflow",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "40",			"name": "Sticky Note",			"description": "Allows capturing Notes on the Workflow",			"details": "",			"examples": "",			"type": "sticky",			"nodeClass": "fire.nodes.doc.NodeStickyNote",			"x": "726.993px",			"y": "203.989px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "bgColor",					"value": "blue",					"widget": "textfield",					"title": "Bg Color",					"description": "Background of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "width",					"value": "130.011364px",					"widget": "textfield",					"title": "Width",					"description": "Width of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "height",					"value": "51.011364px",					"widget": "textfield",					"title": "Height",					"description": "Height of note",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "comment",					"value": "<p><strong>Data exploration</strong></p>",					"widget": "textarea_rich",					"title": "Comment",					"description": "Comments for the Workflow",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "41",			"name": "Moving Window Functions",			"description": "This node calculates the moving values of selected functions for the field(input column).",			"details": "This node Generates a new Dataframe with Moving Window Function based computed Column appended to the incoming Dataframe.<br>\n<br>\nNew Column is populated with value based on selected Moving Window Function applied on the selected column.<br>",			"examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT    |    SALARY    |    AGE    <br>\n------------------------------------------------------------------------<br>\nE01       |    ANTHONY     |    HR      |    50000     |    40<br>\nE02       |    LISA        |    HR      |    50000     |    35<br>\nE03       |    MARTIN      |    HR      |    20000     |    25<br>\nE04       |    DAVID       |    SALES   |    55000     |    40<br>\nE05       |    MARK        |    SALES   |    60000     |    45<br>\nE06       |    JOE         |    SALES   |    40000     |    25<br>\nE07       |    BELLA       |    HR      |    60000     |    24<br>\n<br>\nIf MovingWindowFunctions node is configured as below:<br>\n<br>\nWINDOW START           :     -1<br>\nWINDOW END             :     1<br>\nPARTITION COLUMN NAME  :     DEPT<br>\nORDER COLUMN NAME      :     SALARY<br>\nINPUT COLUMNS          :     SALARY<br>\nFUNCTIONS              :     AVG<br>\n<br>\nWhere window for each row is created from 1 row preceeding it upto 1 row succeeding it. <br>\nThe current incoming Dataframe is partition by [DEPT] and data is sorted by [SALARY].<br>\nNew column created would be populated with [AVG] of [SALARY] for rows present in a window within a partition.<br>\nOutgoing Dataframe would be created as below :<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT    |    SALARY    |    AGE    |    mean_SALARY<br>\n---------------------------------------------------------------------------------------<br>\nE03       |    MARTIN      |    HR      |    20000     |    25     |    35000.0<br>\nE01       |    ANTHONY     |    HR      |    50000     |    40     |    40000.0<br>\nE02       |    LISA        |    HR      |    50000     |    35     |    53333.333<br>\nE07       |    BELLA       |    HR      |    60000     |    24     |    55000.0<br>\nE06       |    JOE         |    SALES   |    40000     |    25     |    47500.0<br>\nE04       |    DAVID       |    SALES   |    55000     |    40     |    51666.667<br>\nE05       |    MARK        |    SALES   |    60000     |    45     |    57500.0<br>",			"type": "transform",			"nodeClass": "fire.nodes.etl.NodeMovingWindowFunctions",			"x": "764.987px",			"y": "102.984px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "windowStart",					"value": "-1",					"widget": "textfield",					"title": "Window Start",					"description": "value to be used to calculate the window from",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "windowEnd",					"value": "1",					"widget": "textfield",					"title": "Window End",					"description": "value to be used to calculate the window to",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "partitionCol",					"value": "",					"widget": "variable",					"title": "Partition Column Name",					"description": "partition column to split the incoming dataframe for the sliding/window operation",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "orderCol",					"value": "Order_ID",					"widget": "variable",					"title": "Order Column Name",					"description": "the order of the selected column for the sliding/window operation",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "inputCols",					"value": "[\"Units_Sold\"]",					"widget": "variables_list_select",					"title": "Input Columns",					"description": "input column name for calc",					"datatypes": [						"integer",						"long",						"double",						"float"					],					"required": true,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "functions",					"value": "[\"avg\"]",					"widget": "variables_list_array",					"title": "Functions",					"description": "",					"optionsArray": [						"avg",						"min",						"max",						"stddev",						"variance",						"skewness",						"kurtosis",						"coefficient_of_variation",						"range",						"rms"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		},		{			"id": "42",			"name": "Print N Rows",			"description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",			"details": "This node is used to print incoming dataset.<br>\n<br>\nNumber of rows that needs to be printed can be configured in the node.<br>",			"examples": "",			"type": "transform",			"nodeClass": "fire.nodes.util.NodePrintFirstNRows",			"x": "857.967px",			"y": "109.974px",			"fields": [				{					"name": "storageLevel",					"value": "DEFAULT",					"widget": "array",					"title": "Output Storage Level",					"description": "Storage Level of the Output Datasets of this Node",					"optionsArray": [						"DEFAULT",						"NONE",						"DISK_ONLY",						"DISK_ONLY_2",						"MEMORY_ONLY",						"MEMORY_ONLY_2",						"MEMORY_ONLY_SER",						"MEMORY_ONLY_SER_2",						"MEMORY_AND_DISK",						"MEMORY_AND_DISK_2",						"MEMORY_AND_DISK_SER",						"MEMORY_AND_DISK_SER_2",						"OFF_HEAP"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "title",					"value": "Row Values",					"widget": "textfield",					"title": "Title",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "n",					"value": "10",					"widget": "textfield",					"title": "Num Rows to Print",					"description": "number of rows to be printed",					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				},				{					"name": "displayDataType",					"value": "true",					"widget": "array",					"title": "Display Data Type",					"description": "If true display rows DataType",					"optionsArray": [						"true",						"false"					],					"required": false,					"display": true,					"editable": true,					"disableRefresh": false				}			],			"engine": "all"		}	],	"edges": [		{			"source": "1",			"target": "3",			"id": 1		},		{			"source": "1",			"target": "4",			"id": 2		},		{			"source": "3",			"target": "6",			"id": 3		},		{			"source": "6",			"target": "5",			"id": 4		},		{			"source": "5",			"target": "7",			"id": 5		},		{			"source": "4",			"target": "7",			"id": 6		},		{			"source": "7",			"target": "8",			"id": 7		},		{			"source": "8",			"target": "9",			"id": 8		},		{			"source": "9",			"target": "10",			"id": 9		},		{			"source": "10",			"target": "11",			"id": 10		},		{			"source": "11",			"target": "12",			"id": 11		},		{			"source": "11",			"target": "13",			"id": 12		},		{			"source": "12",			"target": "16",			"id": 13		},		{			"source": "18",			"target": "24",			"id": 14		},		{			"source": "13",			"target": "17",			"id": 15		},		{			"source": "21",			"target": "28",			"id": 16		},		{			"source": "17",			"target": "18",			"id": 17		},		{			"source": "17",			"target": "24",			"id": 18		},		{			"source": "13",			"target": "29",			"id": 19		},		{			"source": "29",			"target": "30",			"id": 20		},		{			"source": "30",			"target": "31",			"id": 21		},		{			"source": "29",			"target": "31",			"id": 22		},		{			"source": "24",			"target": "32",			"id": 23		},		{			"source": "28",			"target": "33",			"id": 24		},		{			"source": "31",			"target": "34",			"id": 25		},		{			"source": "13",			"target": "36",			"id": 26		},		{			"source": "36",			"target": "21",			"id": 27		},		{			"source": "36",			"target": "28",			"id": 28		},		{			"source": "13",			"target": "37",			"id": 29		},		{			"source": "37",			"target": "19",			"id": 30		},		{			"source": "19",			"target": "26",			"id": 31		},		{			"source": "37",			"target": "26",			"id": 32		},		{			"source": "26",			"target": "35",			"id": 33		},		{			"source": "11",			"target": "41",			"id": 34		},		{			"source": "41",			"target": "42",			"id": 35		}	],	"dataSetDetails": [],	"engine": "pyspark"}