{"name": "Pivot Example",  "uuid": "2aad7825-b677-41ee-8465-bbf219d2f0d1",  "category": "Scala",  "description": "-",  "parameters": "-",  "nodes": [    {      "id": "1",      "name": "ReadCSV",      "description": "It reads in CSV files and creates a DataFrame from it",      "details": "",      "examples": "",      "type": "dataset",      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",      "x": "42px",      "y": "135px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "path",          "value": "data/vehicles.csv",          "widget": "textfield",          "title": "Path",          "description": "Path of the Text file/directory",          "required": true,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "separator",          "value": ",",          "widget": "textfield",          "title": "Separator",          "description": "CSV Separator",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "header",          "value": "true",          "widget": "array",          "title": "Header",          "description": "Does the file have a header row",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "dropMalformed",          "value": "false",          "widget": "array",          "title": "Drop Malformed",          "description": "Whether to drop Malformed records or error",          "optionsArray": [            "true",            "false"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"barrels08\",\"barrelsA08\",\"charge120\",\"charge240\",\"city08\",\"city08U\",\"cityA08\",\"cityA08U\",\"cityCD\",\"cityE\",\"cityUF\",\"co2\",\"co2A\",\"co2TailpipeAGpm\",\"co2TailpipeGpm\",\"comb08\",\"comb08U\",\"combA08\",\"combA08U\",\"combE\",\"combinedCD\",\"combinedUF\",\"cylinders\",\"displ\",\"drive\",\"engId\",\"eng_dscr\",\"feScore\",\"fuelCost08\",\"fuelCostA08\",\"fuelType\",\"fuelType1\",\"ghgScore\",\"ghgScoreA\",\"highway08\",\"highway08U\",\"highwayA08\",\"highwayA08U\",\"highwayCD\",\"highwayE\",\"highwayUF\",\"hlv\",\"hpv\",\"id\",\"lv2\",\"lv4\",\"make\",\"model\",\"mpgData\",\"phevBlended\",\"pv2\",\"pv4\",\"range\",\"rangeCity\",\"rangeCityA\",\"rangeHwy\",\"rangeHwyA\",\"trany\",\"UCity\",\"UCityA\",\"UHighway\",\"UHighwayA\",\"VClass\",\"year\",\"youSaveSpend\",\"guzzler\",\"trans_dscr\",\"tCharger\",\"sCharger\",\"atvType\",\"fuelType2\",\"rangeA\",\"evMotor\",\"mfrCode\",\"c240Dscr\",\"charge240b\",\"c240bDscr\",\"createdOn\",\"modifiedOn\",\"startStop\",\"phevCity\",\"phevHwy\",\"phevComb\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "valuewidget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "2",      "name": "ColumnFilter",      "description": "This node creates a new DataFrame that contains only the selected columns",      "details": "",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeColumnFilter",      "x": "210px",      "y": "132px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputCols",          "value": "[\"comb08\",\"VClass\",\"year\"]",          "widget": "variables",          "title": "Columns",          "description": "Columns to be included in the output DataFrame",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "3",      "name": "RowFilter",      "description": "This node creates a new DataFrame containing only rows satisfying given condition",      "details": "This node creates a new DataFrame containing only rows satisfying the given condition.<br>\n<br>\n<h2>Examples of Conditional Expression</h2>\n<br>\ncol1 > 5 AND col2 > 3<br>\n<br>\nname is not NULL<br>\n<br>\nname is NULL<br>\n<br>\nusd_pledged_real > 0 and (category = \"Narrative Film\" or category == \"Music\") and goal > 100<br>\n<br>\ndatetime > '2011-01-01 00:00:00.0'     (datetime column is of type timestamp)<br>\n<br>\ndatetime > '2011-01-01 00:00:00.0' and datetime < '2016-01-01 00:00:00.0'<br>",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeRowFilter",      "x": "382px",      "y": "134px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "conditionExpr",          "value": "VClass like \"%Cars\" and (year = 2015 or year = 2016 or year = 2017 or year = 2018)",          "widget": "textarea_small",          "title": "Conditional Expression",          "description": "The filtering condition. Rows not satisfying given condition will be excluded from output DataFrame. eg: usd_pledged_real > 0 and (category = 1 or category == 2) and goal > 100",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    },    {      "id": "4",      "name": "ColumnsRename",      "description": "This node creates a new DataFrame by renaming existing columns with new name",      "details": "",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.etl.NodeColumnsRename",      "x": "553px",      "y": "130px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "currentColNames",          "value": "[\"comb08\",\"VClass\",\"year\"]",          "widget": "variables_map",          "title": "Current Column Names",          "description": "Current Column Names",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "newColNames",          "value": "[\"mpg\",\"class\",\"\"]",          "widget": "variables_map_edit",          "title": "Columns New Name",          "description": "New name for existing columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "5",      "name": "Scala",      "description": "This node runs any given Scala code. The input dataframe is passed in the variable inDF. The output dataframe is passed back by registering it as a temporary table.",      "details": "",      "examples": "",      "type": "scala",      "nodeClass": "fire.nodes.etl.NodeScala",      "x": "544px",      "y": "244px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "code",          "value": "import org.apache.spark.sql.expressions.Window\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\n                              \nval outDF = inDF.groupBy(\"class\").pivot(\"year\").agg(round(avg(\"mpg\"),2)).sort(\"class\")\noutDF.registerTempTable(\"outDF\")",          "widget": "textarea_medium",          "title": "Scala",          "description": "Scala code to be run. Input dataframe : \"inDF\", SparkContext : \"sc\", SQLContext : \"sqlContext\",  Output/Result dataframe should be registered as a temporary table - df.registerTempTable(\"outDF\")",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "schema",          "value": "",          "widget": "tab",          "title": "Schema",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColNames",          "value": "[\"class\"]",          "widget": "schema_col_names",          "title": "Column Names for the CSV",          "description": "New Output Columns of the SQL",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColTypes",          "value": "[\"STRING\"]",          "widget": "schema_col_types",          "title": "Column Types for the CSV",          "description": "Data Type of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "outputColFormats",          "value": "[\"\"]",          "widget": "schema_col_formats",          "title": "Column Formats for the CSV",          "description": "Format of the Output Columns",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "scala"    },    {      "id": "6",      "name": "PrintNRows",      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",      "details": "",      "examples": "",      "type": "transform",      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",      "x": "570px",      "y": "459px",      "fields": [        {          "name": "storageLevel",          "value": "DEFAULT",          "widget": "array",          "title": "Output Storage Level",          "description": "Storage Level of the Output Datasets of this Node",          "optionsArray": [            "DEFAULT",            "NONE",            "DISK_ONLY",            "DISK_ONLY_2",            "MEMORY_ONLY",            "MEMORY_ONLY_2",            "MEMORY_ONLY_SER",            "MEMORY_ONLY_SER_2",            "MEMORY_AND_DISK",            "MEMORY_AND_DISK_2",            "MEMORY_AND_DISK_SER",            "MEMORY_AND_DISK_SER_2",            "OFF_HEAP"          ],          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "title",          "value": "Row Values",          "widget": "textfield",          "title": "Title",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        },        {          "name": "n",          "value": "10",          "widget": "textfield",          "title": "Num Rows to Print",          "description": "number of rows to be printed",          "required": false,          "display": true,          "editable": true,          "disableRefresh": false        }      ],      "engine": "all"    }  ],  "edges": [    {      "source": "1",      "target": "2",      "id": 1    },    {      "source": "2",      "target": "3",      "id": 2    },    {      "source": "3",      "target": "4",      "id": 3    },    {      "source": "4",      "target": "5",      "id": 4    },    {      "source": "5",      "target": "6",      "id": 5    }  ],  "dataSetDetails": [],  "engine": "scala"  }